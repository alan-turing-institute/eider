[{"path":"https://alan-turing-institute.github.io/eider/docs/CODE_OF_CONDUCT.html","id":"diversity-statement","dir":"","previous_headings":"","what":"Diversity Statement","title":"NA","text":"encourage everyone participate committed building project . Although fail times, seek treat everyone fairly equally possible. Whenever member made mistake, expect take responsibility . someone harmed offended, responsibility listen carefully respectfully, best right wrong. Although list exhaustive, explicitly honour diversity age, gender, gender identity expression, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, technical ability. tolerate discrimination based protected characteristics , including participants visible invisible disabilities.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"NA","text":"Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behaviour include: Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting use sexualised language imagery, sexual attention advances kind","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"NA","text":"Code Conduct applies members participating activities, events processes taking place within scope repository. Specifically, Code Conduct applies conduct: - interactions within team/community maintaining repo - team activity, communication event related repo - outside team activity team member representing project - members outside team engaging GitHub repository. Code Conduct also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"NA","text":"Code Conduct uses template created maintained Turing Way team members shared CC-4.0 reuse: https://github.com/alan-turing-institute/reproducible-project-template","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"eider","title":"eider","text":"Reincarnation SPARRA new bird","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CONTRIBUTING.html","id":"package-documentation","dir":"","previous_headings":"","what":"Package documentation","title":"eider","text":"https://alan-turing-institute.github.io/eider/docs/","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CONTRIBUTING.html","id":"setting-up-pre-commit","dir":"","previous_headings":"","what":"Setting up pre-commit","title":"eider","text":"Installation : done, every time commit, automatically run devtools::document(). document() generated new files (.e. hadn’t run document() committing), commit go : manually git add new files commit .","code":"pip install pre-commit   # or brew install pre-commit install"},{"path":"https://alan-turing-institute.github.io/eider/docs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 eider authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combination.html","id":"json-structure","dir":"Articles","previous_headings":"","what":"JSON structure","title":"Combination features","text":"top-level JSON keys specified feature overview, output_feature_name transformation_type still required combination features. , output_feature_name name feature created. value transformation_type can : combine_linear: calculate linear combination features combine_min: calculate minimum features combine_max: calculate maximum features top , combination features require subfeature key, JSON object. keys can string (though helps descriptive), values JSON objects define subfeatures, sans output_feature_name (required). Note subfeature may different source_file key, allows subfeatures come different input tables. linear combinations, subfeature must contain weight key, number determines coefficients feature linear combination.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combination.html","id":"minimum-and-maximum-combination","dir":"Articles","previous_headings":"","what":"Minimum and maximum combination","title":"Combination features","text":", let’s make data illustrate . Suppose want find number times patient diagnosed “” number times diagnosed “B”, whichever greater. number “” diagnoses ordinarily specified using following JSON: number “B” diagnoses exactly identical , except “” replaced “B”. combination feature seek can thus specified json_examples/combination1.json. subfeature exactly , except output_feature_name key omitted: Running gives us expected values 4 2 two patients respectively:","code":"input_table <- data.frame(   id = c(1, 1, 1, 1, 2, 2, 2, 2),   diagnosis = c(\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\") )  input_table #>   id diagnosis #> 1  1         A #> 2  1         A #> 3  1         A #> 4  1         A #> 5  2         A #> 6  2         A #> 7  2         B #> 8  2         B {     \"output_feature_name\": \"num_A\",     \"source_file\": \"input_table\",     \"transformation_type\": \"count\",     \"absent_default_value\": 0,     \"grouping_column\": \"id\",     \"filter\": {         \"column\": \"diagnosis\",         \"type\": \"in\",         \"value\": [\"A\"]     } } {     \"output_feature_name\": \"max_of_A_and_B\",     \"transformation_type\": \"combine_max\",     \"subfeature\": {         \"num_A\": {             \"source_file\": \"input_table\",             \"grouping_column\": \"id\",             \"transformation_type\": \"count\",             \"absent_default_value\": 0,             \"filter\": {                 \"column\": \"diagnosis\",                 \"type\": \"in\",                 \"value\": [\"A\"]             }         },         \"num_B\": {             \"source_file\": \"input_table\",             \"grouping_column\": \"id\",             \"transformation_type\": \"count\",             \"absent_default_value\": 0,             \"filter\": {                 \"column\": \"diagnosis\",                 \"type\": \"in\",                 \"value\": [\"B\"]             }         }     } } results <- run_pipeline(   data_sources = list(input_table = input_table),   feature_filenames = \"json_examples/combination1.json\" )  results$features #>   id max_of_A_and_B #> 1  1              4 #> 2  2              2"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combination.html","id":"linear-combination","dir":"Articles","previous_headings":"","what":"Linear combination","title":"Combination features","text":"Linear combinations allow calculate, example, weighted sum two features. Suppose want assign score 10 every “” diagnosis 20 every “B” diagnosis. can use JSON , two minor modifications: transformation_type key set combine_linear weight key added subfeature, appropriate value result json_examples/combination2.json: running : Note simple unweighted sum features, weights can set 1; take difference two features, one weight can set 1 -1.","code":"{     \"output_feature_name\": \"linear\",     \"transformation_type\": \"combine_linear\",     \"subfeature\": {         \"A_score\": {             \"weight\": 10,             \"source_file\": \"input_table\",             \"grouping_column\": \"id\",             \"transformation_type\": \"count\",             \"absent_default_value\": 0,             \"filter\": {                 \"column\": \"diagnosis\",                 \"type\": \"in\",                 \"value\": [\"A\"]             }         },         \"B_score\": {             \"weight\": 20,             \"source_file\": \"input_table\",             \"grouping_column\": \"id\",             \"transformation_type\": \"count\",             \"absent_default_value\": 0,             \"filter\": {                 \"column\": \"diagnosis\",                 \"type\": \"in\",                 \"value\": [\"B\"]             }         }     } } results <- run_pipeline(   data_sources = list(input_table = input_table),   feature_filenames = \"json_examples/combination2.json\" )  results$features #>   id linear #> 1  1     40 #> 2  2     60"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combine.html","id":"read-in-data","dir":"Articles","previous_headings":"","what":"1. Read in data","title":"Combine Example","text":"time need two datasets, one &E data one prescribing data. &E data. Note purely illustration purposes, don’t need call read.csv data file transform . prescription data:","code":"ae_data_filepath <- eider_example(\"random_ae_data.csv\") prescribing_data_filepath <- eider_example(\"random_pis_data.csv\") utils::read.csv(ae_data_filepath) #>     id       date attendance_category diagnosis_1 diagnosis_2 diagnosis_3 #> 1   15 2017-06-12                   5           1          18           7 #> 2    0 2017-12-22                   1          15           8          NA #> 3    3 2016-10-28                   3          16           7          NA #> 4    7 2016-09-06                   3           1          NA          NA #> 5   18 2017-08-26                   2          12           3          NA #> 6   15 2016-09-04                   4           2          17           3 #> 7    6 2015-10-22                   4          18           8          NA #> 8    2 2017-11-20                   4          17          NA          NA #> 9   14 2017-03-26                   4          18           9           8 #> 10   8 2017-01-15                   1          10           2           7 #> 11   0 2016-08-06                   4          11          12           7 #> 12  13 2015-02-23                   5          12          NA          NA #> 13   6 2017-02-12                   3          10          99          NA #> 14   2 2015-11-12                   1           8          19          NA #> 15  13 2016-10-16                   3          15           1          NA #> 16   0 2016-03-18                   3           0          NA          NA #> 17  17 2015-07-23                   2           9          NA          NA #> 18   0 2016-03-06                   1          16          10          13 #> 19   8 2015-07-12                   3          17          15          12 #> 20  11 2015-08-29                   5           4          NA          NA #> 21   0 2017-11-19                   4          17          13          NA #> 22   5 2016-03-06                   4          12           3           8 #> 23   8 2017-09-27                   5          11          NA          NA #> 24  13 2017-02-19                   2          19          NA          NA #> 25   6 2016-08-24                   1           4          NA          NA #> 26   4 2017-05-18                   5           1          NA          NA #> 27  14 2016-01-07                   2          11           3          NA #> 28  10 2017-08-11                   4          10          12           6 #> 29  13 2017-09-04                   1           1           9          NA #> 30  17 2015-07-20                   2           9           0          NA #> 31   1 2015-11-28                   1           1          18          NA #> 32  11 2016-04-16                   5          14           9          19 #> 33  13 2016-04-19                   1          18          11          NA #> 34  12 2015-06-14                   5          14          NA          NA #> 35  19 2015-12-24                   1           6          NA          NA #> 36  19 2015-10-30                   3           1           8          NA #> 37   2 2017-04-10                   3          13          NA          NA #> 38   6 2015-03-07                   4          14          19          NA #> 39   6 2016-01-27                   2          19          11           4 #> 40   8 2016-11-24                   3           0          NA          NA #> 41  10 2015-11-24                   1           4           1          12 #> 42  12 2015-11-18                   1          12           2          NA #> 43   9 2017-04-18                   1          19           6          NA #> 44   9 2017-09-14                   5          11          NA          NA #> 45   8 2015-06-07                   2           5          10          NA #> 46  11 2015-11-14                   1           8          NA          NA #> 47   5 2017-05-03                   4           8           0          18 #> 48   0 2015-04-02                   4          16           6          NA #> 49  17 2016-11-29                   3          10          NA          NA #> 50  10 2016-05-07                   3           4          18          NA #> 51  17 2015-12-10                   2           9          NA          NA #> 52   5 2015-08-19                   2          99          11          NA #> 53  14 2016-10-12                   1          16          19          10 #> 54   7 2016-11-09                   4          11          18           4 #> 55  13 2015-01-13                   5          12           4          NA #> 56  15 2016-08-11                   5           2          NA          NA #> 57  19 2016-05-19                   1           4           2          NA #> 58   6 2017-10-11                   5          16          17           1 #> 59   7 2016-12-22                   1           6          NA          NA #> 60  17 2015-12-21                   1          15           1          18 #> 61  17 2015-08-30                   1          13          11          NA #> 62  13 2017-03-30                   3          19           7          NA #> 63  17 2017-01-02                   4           7          11           8 #> 64  15 2017-05-24                   1           7           9          NA #> 65   3 2017-01-10                   3           4          14          NA #> 66  12 2015-02-25                   4           6           8          13 #> 67   1 2017-12-22                   5           5           6          NA #> 68  19 2015-10-12                   2           1           8          NA #> 69   4 2015-09-29                   3           5          13          NA #> 70  18 2017-03-24                   5           7          NA          NA #> 71  10 2016-05-28                   2          18          NA          NA #> 72  17 2016-12-04                   1           4          15           3 #> 73  18 2017-02-19                   4           6          12          NA #> 74  15 2017-01-05                   1          16          17          NA #> 75   1 2017-04-28                   1          14          10           6 #> 76   0 2016-04-08                   1          10          99          17 #> 77  12 2017-11-11                   4           7          NA          NA #> 78   0 2015-02-23                   2          15          19          NA #> 79  12 2016-07-23                   1          13          NA          NA #> 80  16 2015-09-07                   3           2          NA          NA #> 81  19 2015-04-15                   2           2          10          NA #> 82  19 2016-06-04                   5          17           2          NA #> 83   7 2016-05-10                   4           0          17          NA #> 84  13 2016-03-20                   4           7          NA          NA #> 85   0 2016-03-26                   4           0          NA          NA #> 86   7 2017-07-20                   4          99           7          NA #> 87   7 2016-11-16                   5           6           1           3 #> 88  12 2017-07-24                   1          18           4           0 #> 89  10 2016-12-18                   2          19           6          11 #> 90   3 2017-11-10                   2          18           4          19 #> 91  18 2017-09-12                   3          15          NA          NA #> 92   8 2017-12-19                   5           2           3          NA #> 93  11 2017-03-19                   5          12          16          NA #> 94   7 2017-08-30                   4          99           1          NA #> 95   7 2017-04-13                   1           9          NA          NA #> 96   5 2016-12-03                   5          14           1          NA #> 97   8 2017-09-14                   1           2           1           7 #> 98   3 2016-05-31                   1           6           2          99 #> 99   5 2017-02-11                   1           7          NA          NA #> 100 18 2015-07-29                   1           1          13          14 utils::read.csv(prescribing_data_filepath) #>     id  paid_date bnf_section num_items #> 1   19 2017-12-15         113         3 #> 2   19 2016-08-11         106         5 #> 3   19 2015-07-07         105         1 #> 4    7 2017-03-14         112         1 #> 5    3 2015-08-07         111         1 #> 6   18 2016-05-07         106         3 #> 7    2 2016-09-29         108         4 #> 8    5 2015-12-01         104         3 #> 9    2 2017-01-11         109         1 #> 10   6 2017-11-04         110         4 #> 11  10 2016-01-22         109         4 #> 12   2 2017-04-03         115         5 #> 13  15 2015-11-02         107         3 #> 14   4 2016-06-01         114         5 #> 15  15 2015-05-01         104         1 #> 16   6 2016-05-16         105         2 #> 17  15 2017-01-05         110         4 #> 18  19 2017-03-28         112         2 #> 19  19 2015-12-12         114         3 #> 20   5 2017-07-26         106         1 #> 21  11 2016-07-23         116         6 #> 22   8 2015-11-18         106         2 #> 23   5 2015-10-01         102         4 #> 24  12 2017-03-14         118         3 #> 25  17 2016-07-08         119         3 #> 26  17 2017-06-05         106         1 #> 27  12 2017-04-29         101         2 #> 28  17 2017-08-30         119         3 #> 29  10 2015-09-28         101         1 #> 30  13 2015-01-28         104         4 #> 31  19 2016-04-03         111         2 #> 32  13 2016-07-15         111         2 #> 33   0 2017-01-12         115         4 #> 34  14 2016-11-02         108         2 #> 35  14 2017-02-22         104         3 #> 36   4 2015-11-04         116         5 #> 37  17 2015-05-12         107         4 #> 38   3 2016-05-10         103         3 #> 39  15 2015-10-02         108         1 #> 40  17 2016-08-05         119         2 #> 41   9 2016-11-11         118         1 #> 42   1 2017-12-19         114         2 #> 43   3 2017-05-26         112         6 #> 44  13 2015-01-07         104         1 #> 45   0 2016-11-08         118         4 #> 46  13 2015-08-09         114         4 #> 47   2 2016-04-05         119         4 #> 48  12 2015-10-09         102         1 #> 49  10 2015-01-31         102         5 #> 50   1 2016-01-09         111         3 #> 51   3 2017-04-09         114         3 #> 52  19 2015-02-28         102         3 #> 53   8 2017-12-14         110         4 #> 54   8 2015-12-24         101         6 #> 55   9 2017-03-27         112         2 #> 56  10 2015-08-06         108         2 #> 57   3 2015-05-10         119         3 #> 58   0 2017-06-27         114         2 #> 59  12 2016-08-19         110         2 #> 60   5 2016-11-29         114         3 #> 61  13 2016-04-02         114         4 #> 62  17 2015-04-04         113         3 #> 63   8 2015-01-25         116         3 #> 64   8 2015-08-30         112         3 #> 65   3 2015-03-20         103         2 #> 66  14 2017-01-16         117         3 #> 67  13 2016-01-17         117         2 #> 68  18 2015-05-28         111         6 #> 69  15 2016-05-13         115         4 #> 70   3 2017-11-14         102         2 #> 71  16 2015-03-24         118         2 #> 72  19 2015-05-30         103         2 #> 73   7 2017-07-13         101         4 #> 74   3 2017-05-24         119         7 #> 75  17 2015-02-06         109         3 #> 76  18 2016-06-30         116         3 #> 77  19 2017-12-26         105         3 #> 78   1 2015-11-30         101         3 #> 79  17 2017-04-05         115         3 #> 80   9 2015-09-14         118         4 #> 81   8 2017-11-24         101         4 #> 82  16 2017-09-05         113         4 #> 83  18 2016-07-30         103         3 #> 84   5 2016-02-18         118         4 #> 85  15 2017-09-25         118         6 #> 86  17 2015-03-25         103         3 #> 87  17 2015-07-27         116         2 #> 88  19 2015-02-07         112         3 #> 89   6 2016-03-02         104         2 #> 90  16 2016-05-20         110         2 #> 91   8 2017-06-22         107         3 #> 92   8 2017-08-15         104         3 #> 93  15 2016-10-15         117         2 #> 94   7 2016-01-20         102         5 #> 95  15 2017-09-12         102         3 #> 96   9 2017-06-21         113         3 #> 97   0 2015-08-17         105         4 #> 98   1 2017-11-04         101         2 #> 99  15 2016-06-07         117         3 #> 100  4 2015-03-15         105         1"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combine.html","id":"read-in-the-specification","dir":"Articles","previous_headings":"","what":"2. Read in the specification","title":"Combine Example","text":"specification looks like. Notice now two features, refer different source tables. COMBINE_LINEAR feature type generates linear combination two subfeatures, coefficients specified weight field. case, weight subfeatures 1, means final feature simply sum two subfeatures. one wanted difference two subfeatures (example), one instead set weight second subfeature -1.","code":"basic_combine_spec_filepath <- eider_example(   \"spec_example_combine_linear.json\" ) #> Error in system.file(\"extdata\", file, package = current_package_name, : no file found writeLines(readLines(basic_combine_spec_filepath)) #> Error in eval(expr, envir, enclos): object 'basic_combine_spec_filepath' not found"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combine.html","id":"run-the-transformation","dir":"Articles","previous_headings":"","what":"3. Run the transformation","title":"Combine Example","text":"","code":"all_data_paths <- list(   ae2 = ae_data_filepath,   prescribing = prescribing_data_filepath ) run_pipeline(all_data_paths, basic_combine_spec_filepath) #> Error in eval(expr, envir, enclos): object 'basic_combine_spec_filepath' not found"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/eider.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Introduction to eider","text":"illustrate , construct simplistic data, may , example, record patients attended GP associated complaints. practice, likely reading data file instead. example, CSV file called attendances.csv current working directory, just : eider allows mix match data sources, data CSV file R data frame: allows user , example, perform preprocessing portion data needed.","code":"example_table <- data.frame(   patient_id        = c(1, 1, 1, 2, 2, 3, 3, 3),   attendance_reason = c(6, 6, 7, 6, 6, 7, 7, 7) )  data_sources <- list(attendances = example_table) data_sources_2 <- list(attendances = \"attendances.csv\") data_sources_3 <- list(   attendances = example_table,   # A variable which has already been constructed   other_data = \"other_data.csv\"  # A file to be read in )"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/eider.html","id":"feature-specification","dir":"Articles","previous_headings":"","what":"Feature specification","title":"Introduction to eider","text":"Suppose want extract feature corresponding total number times patient attended reason 6. eider requires feature specified JSON, looks like : transformation_type tells kind overall operation performed. determines fields required JSON. source_file specifies name data source used list data sources. grouping_column specifies columns group . absent_default_value specifies data particular patient ID. output_feature_name specifies name column created output table. filter filter object used select rows input table match particular conditions. Subsequent vignettes go detail different types transformations required JSON fields .","code":"{     \"transformation_type\": \"count\",     \"source_file\": \"attendances\",     \"grouping_column\": \"patient_id\",     \"absent_default_value\": 0,     \"output_feature_name\": \"total_attendances\",     \"filter\": {         \"column\": \"attendance_reason\",         \"type\": \"in\",         \"value\": [6]     } }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/eider.html","id":"performing-the-transformation","dir":"Articles","previous_headings":"","what":"Performing the transformation","title":"Introduction to eider","text":"obtain desired feature, can place JSON file (json_examples/eider.json) simply : expected, patients 1 2 attended reason 6 twice, patient 3 . run_pipeline() returns list two data frames, called features responses respectively. refer data used training machine learning models: features independent variables (.e. X), responses dependent variables (.e. y). consistency, eider always returns data frames ensures list IDs. Responses may specified exactly way features, using response_filenames argument instead feature_filenames. alternative placing JSON file providing filename run_pipeline(), can also provide JSON directly string:","code":"run_pipeline(   data_sources = data_sources,   feature_filenames = \"json_examples/eider.json\" ) #> $features #>   id total_attendances #> 1  1                 2 #> 2  2                 2 #> 3  3                 0 #>  #> $responses #>   id #> 1  1 #> 2  2 #> 3  3 json_string <- '{     \"transformation_type\": \"count\",     \"source_file\": \"attendances\",     \"grouping_column\": \"patient_id\",     \"absent_default_value\": 0,     \"output_feature_name\": \"total_attendances\",     \"filter\": {         \"column\": \"attendance_reason\",         \"type\": \"in\",         \"value\": [6]     } }'  run_pipeline(   data_sources = data_sources,   feature_filenames = json_string ) #> $features #>   id total_attendances #> 1  1                 2 #> 2  2                 2 #> 3  3                 0 #>  #> $responses #>   id #> 1  1 #> 2  2 #> 3  3"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/eider.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Introduction to eider","text":"want read step--step guide features eider, move next vignette, covers different types features eider lets define. Alternatively, jump ahead gallery section see examples features might use eider calculate.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/examples_ae.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"Examples: A&E data","text":"specific vignette, using simulated accident emergency (&E) data. dataset contain every column specified , serves useful example real-life data may treated using eider. simplified table 6 columns: id, numeric patient ID; date, admission occurred; attendance_category, numeric value indicating context patient’s admission; diagnosis_1, diagnosis_2, diagnosis_3, numeric values indicating patient’s diagnoses. Note diagnosis_2 diagnosis_3 may necessarily exist every entry. first row example, can see patient 15 admitted 12 June 2017. 3 unique diagnosis codes: 1, 18, 7.","code":"ae_data <- utils::read.csv(ae_data_filepath) dplyr::glimpse(ae_data) #> Rows: 100 #> Columns: 6 #> $ id                  <int> 15, 0, 3, 7, 18, 15, 6, 2, 14, 8, 0, 13, 6, 2, 13,… #> $ date                <chr> \"2017-06-12\", \"2017-12-22\", \"2016-10-28\", \"2016-09… #> $ attendance_category <int> 5, 1, 3, 3, 2, 4, 4, 4, 4, 1, 4, 5, 3, 1, 3, 3, 2,… #> $ diagnosis_1         <int> 1, 15, 16, 1, 12, 2, 18, 17, 18, 10, 11, 12, 10, 8… #> $ diagnosis_2         <int> 18, 8, 7, NA, 3, 17, 8, NA, 9, 2, 12, NA, 99, 19, … #> $ diagnosis_3         <int> 7, NA, NA, NA, NA, 3, NA, NA, 8, 7, 7, NA, NA, NA,…"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/examples_ae.html","id":"feature-1-total-number-of-attendances","dir":"Articles","previous_headings":"","what":"Feature 1: Total number of attendances","title":"Examples: A&E data","text":"first example, calculate total number attendances patient. feature may specified JSON follows: JSON file also provided part package, data, can accessed using eider_example() function. contains following information: source_file specifies identifier input table provided eider; output_feature_name specifies name column created output table; absent_default_value specifies value used patient appear table. case, logical value use 0: patient appear &E table, means 0 attendances. grouping_column specifies column table grouped. case, id column. transformation_type specifies way feature calculated. , value \"count\" means number rows id simply counted. one simplest possible features can calculated using eider. can run using run_pipeline() function: described introductory vignette, run_pipeline() function returns features responses. case, provided ae_count_filepath one feature_filenames, data interested returned part res$features. Notice also data_sources argument takes named list. names list used match source_file JSON file actual data. case, source_file \"ae\", need specify data used ae = ae_data_filepath.","code":"ae_count_filepath <- eider_example(\"ae_total_attendances.json\") writeLines(readLines(ae_count_filepath)) #> { #>   \"source_file\": \"ae\", #>   \"transformation_type\": \"COUNT\", #>   \"grouping_column\": \"id\", #>   \"absent_default_value\": 0, #>   \"output_feature_name\": \"total_ae_attendances\" #> } res <- run_pipeline(   data_sources = list(ae = ae_data_filepath),   feature_filenames = ae_count_filepath )  dplyr::glimpse(res$features) #> Rows: 20 #> Columns: 2 #> $ id                   <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,… #> $ total_ae_attendances <int> 9, 3, 3, 4, 2, 5, 6, 8, 7, 2, 5, 4, 6, 8, 3, 5, 1…"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/examples_ae.html","id":"feature-2-total-number-of-neurology-attendances-in-2017","dir":"Articles","previous_headings":"","what":"Feature 2: Total number of neurology attendances in 2017","title":"Examples: A&E data","text":"second example, calculate total number attendances patient : date within 2017; diagnosis pertaining neurology (corresponds diagnosis code 13). , feature still \"count\" transformation. However, must additionally apply filter table performing count, ensure rows interested counted (see filtering vignette examples ).","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/examples_ae.html","id":"the-date","dir":"Articles","previous_headings":"Feature 2: Total number of neurology attendances in 2017","what":"The date","title":"Examples: A&E data","text":"filter, want constrain date 1 January 2017 31 December 2017. specific filter date range; however, can construct conjunction two subfilters: one restricts date 1 January 2017, one restricts 31 December 2017. filters must simultaneously satisfied; thus, need use \"\" filter: Note names subfilters—\"date1\" \"date2\"—arbitrary; just used distinguish two subfilters. can choose names consider useful.","code":"{     ...,     \"filter\": {         \"type\": \"and\",         \"subfilter\": {             \"date1\": {                 \"column\": \"date\",                 \"type\": \"date_gt_eq\",                 \"value\": \"2017-01-01\"             },             \"date2\": {                 \"column\": \"date\",                 \"type\": \"date_lt_eq\",                 \"value\": \"2017-12-31\"             }         }     } }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/examples_ae.html","id":"the-diagnosis","dir":"Articles","previous_headings":"Feature 2: Total number of neurology attendances in 2017","what":"The diagnosis","title":"Examples: A&E data","text":"numeric diagnosis can occur three diagnosis columns, need check three retain rows three diagnosis columns equal 13. accomplished \"\" filter:","code":"{     ...,     \"filter\": {         \"type\": \"or\",         \"subfilter\": {             \"diag1\": {                 \"column\": \"diagnosis_1\",                 \"type\": \"in\",                 \"value\": [13]             },             \"diag2\": {                 \"column\": \"diagnosis_2\",                 \"type\": \"in\",                 \"value\": [13]             },             \"diag3\": {                 \"column\": \"diagnosis_3\",                 \"type\": \"in\",                 \"value\": [13]             }         }     } }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/examples_ae.html","id":"combining-both-filters","dir":"Articles","previous_headings":"Feature 2: Total number of neurology attendances in 2017","what":"Combining both filters","title":"Examples: A&E data","text":"combine filters, can nest within \"\" filter. Note can principle simplified, really really need nest filters deeply. However, work correctly, keep .","code":"{     ...,     \"filter\": {         \"type\": \"and\",         \"subfilter\": {             \"date\": {                 \"type\": \"and\",                 \"subfilter\": {                     \"date1\": {                         \"column\": \"date\",                         \"type\": \"date_gt_eq\",                         \"value\": \"2017-01-01\"                     },                     \"date2\": {                         \"column\": \"date\",                         \"type\": \"date_lt_eq\",                         \"value\": \"2017-12-31\"                     }                 }             },             \"diag\": {                 \"type\": \"or\",                 \"subfilter\": {                       \"diag1\": {                           \"column\": \"diagnosis_1\",                           \"type\": \"in\",                           \"value\": [13]                       },                       \"diag2\": {                           \"column\": \"diagnosis_2\",                           \"type\": \"in\",                           \"value\": [13]                       },                       \"diag3\": {                           \"column\": \"diagnosis_3\",                           \"type\": \"in\",                           \"value\": [13]                       }                 }             }         }     } } (date1 AND date2) AND (diag1 OR diag2 OR diag3) date1 AND date2 AND (diag1 OR diag2 OR diag3)"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/examples_ae.html","id":"the-feature","dir":"Articles","previous_headings":"Feature 2: Total number of neurology attendances in 2017","what":"The feature","title":"Examples: A&E data","text":"JSON file feature provided part package. exactly earlier example, except filter added . feature can run way previous one. make things slightly interesting, provide features run_pipeline() time: case, can see patient 0 (example) 9 total attendances, 1 2017 resulted neurology diagnosis.","code":"ae_neurology_filepath <- eider_example(\"ae_attendances_neurology_2017.json\") writeLines(readLines(ae_neurology_filepath)) #> { #>     \"source_file\": \"ae\", #>     \"transformation_type\": \"COUNT\", #>     \"grouping_column\": \"id\", #>     \"absent_default_value\": 0, #>     \"output_feature_name\": \"total_neurology_ae_attendances\", #>     \"filter\": { #>         \"type\": \"and\", #>         \"subfilter\": { #>             \"date\": { #>                 \"type\": \"and\", #>                 \"subfilter\": { #>                     \"date1\": { #>                         \"column\": \"date\", #>                         \"type\": \"date_gt_eq\", #>                         \"value\": \"2017-01-01\" #>                     }, #>                     \"date2\": { #>                         \"column\": \"date\", #>                         \"type\": \"date_lt_eq\", #>                         \"value\": \"2017-12-31\" #>                     } #>                 } #>             }, #>             \"diag\": { #>                 \"type\": \"or\", #>                 \"subfilter\": { #>                     \"diag1\": { #>                         \"column\": \"diagnosis_1\", #>                         \"type\": \"in\", #>                         \"value\": [ #>                             13 #>                         ] #>                     }, #>                     \"diag2\": { #>                         \"column\": \"diagnosis_2\", #>                         \"type\": \"in\", #>                         \"value\": [13] #>                     }, #>                     \"diag3\": { #>                         \"column\": \"diagnosis_3\", #>                         \"type\": \"in\", #>                         \"value\": [13] #>                     } #>                 } #>             } #>         } #>     } #> } res <- run_pipeline(   data_sources = list(ae = ae_data_filepath),   feature_filenames = c(ae_count_filepath, ae_neurology_filepath) )  dplyr::glimpse(res$features) #> Rows: 20 #> Columns: 3 #> $ id                             <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1… #> $ total_ae_attendances           <int> 9, 3, 3, 4, 2, 5, 6, 8, 7, 2, 5, 4, 6, … #> $ total_neurology_ae_attendances <int> 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/examples_ae.html","id":"checking-the-results","dir":"Articles","previous_headings":"","what":"Checking the results","title":"Examples: A&E data","text":"can verify results using standard dplyr pipeline. feature 1: feature 2: tells us patients 0 2 ones neurology attendances 2017, consistent feature table eider calculated. However, notice eider taken care joining features together inserting missing value 0 necessary. Using eider also helps avoid errors can easily creep data mutated long script.","code":"ae_data %>%   dplyr::group_by(id) %>%   dplyr::summarise(total_ae_attendances = dplyr::n()) %>%   dplyr::glimpse() #> Rows: 20 #> Columns: 2 #> $ id                   <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,… #> $ total_ae_attendances <int> 9, 3, 3, 4, 2, 5, 6, 8, 7, 2, 5, 4, 6, 8, 3, 5, 1… ae_data %>%   dplyr::filter(date >= \"2017-01-01\", date <= \"2017-12-31\") %>%   dplyr::filter(diagnosis_1 == 13 | diagnosis_2 == 13 | diagnosis_3 == 13) %>%   dplyr::group_by(id) %>%   dplyr::summarise(total_neurology_ae_attendances = dplyr::n()) %>%   dplyr::glimpse() #> Rows: 2 #> Columns: 2 #> $ id                             <int> 0, 2 #> $ total_neurology_ae_attendances <int> 1, 1"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/features.html","id":"features-as-json","dir":"Articles","previous_headings":"","what":"Features as JSON","title":"An overview of features","text":"Features JSON objects, association keys values tied together within curly braces. Keys always strings, values can strings, numbers, booleans, arrays, objects , shown example object . Conceptually, JSON objects similar R lists. correctly parsed eider, feature must contain specific set keys. keys shared across features : (string) source_file name table read . Note filename: unique identifier passed part data_sources argument run_pipeline(). Please see introductory vignette explanation . (string) output_feature_name determines name column final dataframe eider produces. can string like, long clashes multiple features; feature name \"id\" also reserved used. (string) grouping_column name column input dataframe feature calculated . feature column contain result calculation unique value column. case medical data, typically name column containing patient ID. remainder vignette, refer values within column “IDs”. (number; optional) absent_default_value value used IDs present input dataframe. eider calculates numeric features, number. omitted, eider insert NA values missing IDs. (string) transformation_type defines type calculation performed feature. transformation type may require extra set keys specified feature correctly calculated.","code":"{   \"key_1\": \"a string\",   \"key_2\": 1,   \"key_3\": true,   \"key_4\": [1, 2, 3],   \"key_5\": {     \"nested_key_1\": \"a string\",     \"nested_key_2\": 1   } }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/features.html","id":"transformation-types","dir":"Articles","previous_headings":"","what":"Transformation types","title":"An overview of features","text":"available transformation types can split groups:","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/features.html","id":"counting","dir":"Articles","previous_headings":"Transformation types","what":"Counting","title":"An overview of features","text":"Transformation types: \"count\", \"present\" two simplest features \"count\", counts number occurrences ID dataset, \"present\", outputs 1 ID found dataset 0 .","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/features.html","id":"summaries","dir":"Articles","previous_headings":"Transformation types","what":"Summaries","title":"An overview of features","text":"Transformation types: \"sum\", \"nunique\", \"mean\", \"median\", \"sd\", \"first\", \"last\", \"min\", \"max\" features act respect values specific column, require single extra key specified: (string) aggregation_column name column containing values aggregated. feature calculated unique ID aggregating values column.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/features.html","id":"time-based","dir":"Articles","previous_headings":"Transformation types","what":"Time-based","title":"An overview of features","text":"Transformation types: \"time_since\" time_since transformation type calculates period time given date first (last) date dataset ID. feature requires keys: (string) date_column name column containing dates used calculation. (string) cutoff_date date used reference point calculation. format YYYY-MM-DD. (boolean) from_first true, feature calculate time cutoff date first date dataset ID. false, calculate time cutoff date last date. (string) time_units unit time used calculation. can either \"days\" \"years\": year defined 365.25 days.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/features.html","id":"combination-features","dir":"Articles","previous_headings":"Transformation types","what":"Combination features","title":"An overview of features","text":"Transformation types: \"combine_linear\", \"combine_min\", \"combine_max\" Combination features way combining results multiple features single feature. slightly different structure rest: broadly speaking, transformation types require subfeature key, object contains features combined. Combination features covered separate vignette.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/features.html","id":"preprocessing-and-filtering","dir":"Articles","previous_headings":"","what":"Preprocessing and filtering","title":"An overview of features","text":"may seem like large number possible calculations, offer way controlling parts input data considered. addition keys shown , (non-combination) features may also contain preprocess filter keys, perform transformations input table features calculated . Preprocessing refers modification values within table, whereas filtering modify values, allows rows pass set criteria considered calculating feature. Preprocessing performed prior filtering: thus, specified, filtering performed already-preprocessed values. preprocess filter keys JSON objects, detailed respectively preprocessing filtering vignettes.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/filtering.html","id":"basic-filters","dir":"Articles","previous_headings":"","what":"Basic filters","title":"Filtering","text":"basic filter accept rows value given column meets certain criterion. example, may want look rows value age column greater 18. three pieces information must encoded: (string) column: name column filter (string) type: type filter apply value: value compare . type must match type column specified. type key can take one following values: \"\" case, value key can either single value array multiple values. filers rows value column matches one provided values. \"gt\" / \"lt\" / \"gt_eq\" / \"lt_eq\" value column must greater , less , greater equal , less equal value respectively. filters, one value can passed. \"date_gt\" / \"date_lt\" / \"date_gt_eq\" / \"date_lt_eq\" , used dates. distinction mandatory JSON native date type, value must passed string format YYYY-MM-DD. Thus, example, assume column age contains integers, selects people 18, 19, 20 years old; likewise date_of_birth column contains dates, selects people born January 1, 2000. reminder, table filtered passed source_file key feature JSON. described introductory vignette.","code":"{     \"filter\": {         \"column\": \"age\",         \"type\": \"in\",         \"value\": [18, 19, 20]     } } {     \"filter\": {         \"column\": \"date_of_birth\",         \"type\": \"date_gt_eq\",         \"value\": \"2000-01-01\"     } }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/filtering.html","id":"compound-filters","dir":"Articles","previous_headings":"","what":"Compound filters","title":"Filtering","text":"Filters may also combined using Boolean logic operators , , . Instead providing three keys column, type, value, type specified, together subfilter, object maps filter names filter objects. example probably easiest way explain . wanted select people 18, 19, 20 years old, write: filter name, age_filter, can string want: used logging purposes. Notice object age_filter refers , .e., just basic filter already described . filters work exactly way, sole difference accomplish meaningful results generally want subfilter object contain two filters work tandem. example, filters 18-year-olds height 180 (presumably centimetres; although depends input table!): , age_filter height_filter just names logging purposes, refer basic filters. Finally, note subfilters need necessarily basic filters, though: can compound filters . possible nest filters deeply like accomplish desired result.","code":"{     \"filter\": {         \"type\": \"not\",         \"subfilter\": {             \"age_filter\": {                 \"column\": \"age\",                 \"type\": \"in\",                 \"value\": [18, 19, 20]             }         }     } } {     \"column\": \"age\",     \"type\": \"in\",     \"value\": [18, 19, 20] } {     \"filter\": {         \"type\": \"and\",         \"subfilter\": {             \"age_filter\": {                 \"column\": \"age\",                 \"type\": \"in\",                 \"value\": [18]             },             \"height_filter\": {                 \"column\": \"height\",                 \"type\": \"gt\",                 \"value\": 180             }         }     } }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/filtering.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Filtering","text":"Consider following input table five rows: suppose like count number times person diagnosis “B”. transformation_type \"count\"; perform filtering, \"count\" simply return number times person appears dataframe. following JSON provided json_examples/filter1.json: Passing run_pipeline() give us following result: Instead , specify filter diagnosis column (json_examples/filter2.json), can achieve desired result: Note patient 3 count 0, never diagnosed “B”. specified absent_default_value key JSON. like find diagnoses “B” 2024, can add date filter mix, combine diagnosis filter filter (json_examples/filter3.json): Patient 2’s diagnosis excluded time corresponding entry came 2023.","code":"library(eider) input_table <- data.frame(   id = c(1, 1, 1, 2, 3),   date = as.Date(c(     \"2024-01-01\", \"2024-01-02\", \"2024-01-03\",     \"2023-01-01\", \"2023-01-01\"   )),   diagnosis = c(\"A\", \"B\", \"C\", \"B\", \"C\") ) input_table #>   id       date diagnosis #> 1  1 2024-01-01         A #> 2  1 2024-01-02         B #> 3  1 2024-01-03         C #> 4  2 2023-01-01         B #> 5  3 2023-01-01         C {     \"output_feature_name\": \"unfiltered_count\",     \"transformation_type\": \"count\",     \"source_file\": \"input_table\",     \"grouping_column\": \"id\",     \"absent_default_value\": 0 } results <- run_pipeline(   data_sources = list(input_table = input_table),   feature_filenames = \"json_examples/filter1.json\" )  results$features #>   id unfiltered_count #> 1  1                3 #> 2  2                1 #> 3  3                1 {     \"output_feature_name\": \"filtered_count\",     \"transformation_type\": \"count\",     \"source_file\": \"input_table\",     \"grouping_column\": \"id\",     \"absent_default_value\": 0,     \"filter\": {         \"column\": \"diagnosis\",         \"type\": \"in\",         \"value\": [\"B\"]     } } results <- run_pipeline(   data_sources = list(input_table = input_table),   feature_filenames = \"json_examples/filter2.json\" )  results$features #>   id filtered_count #> 1  1              1 #> 2  2              1 #> 3  3              0 {     \"output_feature_name\": \"doubly_filtered_count\",     \"transformation_type\": \"count\",     \"source_file\": \"input_table\",     \"grouping_column\": \"id\",     \"absent_default_value\": 0,     \"filter\": {         \"type\": \"and\",         \"subfilter\": {             \"diagnosis_filter\": {                 \"column\": \"diagnosis\",                 \"type\": \"in\",                 \"value\": [\"B\"]             },             \"date_filter\": {                 \"column\": \"date\",                 \"type\": \"date_gt_eq\",                 \"value\": \"2024-01-01\"             }         }     } } results <- run_pipeline(   data_sources = list(input_table = input_table),   feature_filenames = \"json_examples/filter3.json\" )  results$features #>   id doubly_filtered_count #> 1  1                     1 #> 2  2                     0 #> 3  3                     0"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"logging-in-eider","dir":"Articles","previous_headings":"","what":"Logging in eider","title":"Logging and errors","text":"eider uses logger package log messages. messages eider logged either DEBUG level (eider e.g. parsing information JSON), TRACE level (functions eider log TRACE message containing execution context). running pipeline, can set logging level either: causes DEBUG messages displayed, : causes TRACE DEBUG messages displayed.","code":"logger::log_threshold(logger::DEBUG) logger::log_threshold(logger::TRACE)"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"errors-with-context","dir":"Articles","previous_headings":"","what":"Errors with context","title":"Logging and errors","text":"Additionally, execution context (usually restricted TRACE messages) also displayed eider runs error. run error provide enough information, please consider submitting issue. examples:","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"wrong-transformation-type","dir":"Articles","previous_headings":"Errors with context","what":"Wrong transformation type","title":"Logging and errors","text":"JSON (json_examples/logging1.json), invalid transformation_type specified. Notice resulting error tells JSON file error occurs .","code":"{   \"source_file\": \"ae2\",   \"transformation_type\": \"COUNT DRACULA\",   \"grouping_column\": \"id\",   \"output_feature_name\": \"something\" } run_pipeline(   data_sources = list(ae2 = eider_example(\"random_ae_data.csv\")),   feature_filenames = \"json_examples/logging1.json\" ) #> Error: Unknown transformation type: count dracula #> Context: #>  > featurise: json_examples/logging1.json"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"wrong-column-name","dir":"Articles","previous_headings":"Errors with context","what":"Wrong column name","title":"Logging and errors","text":"(json_examples/logging2.json), grouping_column specified, column exist input table.","code":"{   \"source_file\": \"ae2\",   \"transformation_type\": \"COUNT\",   \"grouping_column\": \"this_column_doesnt_exist\",   \"output_feature_name\": \"something\" } run_pipeline(   data_sources = list(ae2 = eider_example(\"random_ae_data.csv\")),   feature_filenames = \"json_examples/logging2.json\" ) #> Error: The column 'this_column_doesnt_exist' supplied for 'grouping_column' was not found in the input table. #> Context: #>  > featurise: json_examples/logging2.json #>  > featurise_count"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"data-type-mismatch","dir":"Articles","previous_headings":"Errors with context","what":"Data type mismatch","title":"Logging and errors","text":"example (json_examples/logging3.json) specifies table filtered retain rows diagnosis_1 equal \"string\", actual table, diagnosis_1 integer.","code":"{     \"source_file\": \"ae2\",     \"transformation_type\": \"COUNT\",     \"grouping_column\": \"id\",     \"output_feature_name\": \"something\",     \"filter\": {         \"column\": \"diagnosis_1\",         \"type\": \"in\",         \"value\": \"a string\"     } } run_pipeline(   data_sources = list(ae2 = eider_example(\"random_ae_data.csv\")),   feature_filenames = \"json_examples/logging3.json\" ) #> Error: The 'value' field of a filter object must be of the same type as the column to be filtered on. However, the column 'diagnosis_1' is of type 'integer', while the value given is of type 'character'. #> Context: #>  > featurise: json_examples/logging3.json #>  > featurise_count #>  > filter_basic"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/preprocessing.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Preprocessing","text":"begin making case preprocessing can required certain features. Consider following data frame. (heavily simplified version example SMR04 data bundled package, can obtain using eider_example('random_smr04_data.csv').) , row episode; multiple episodes make continuous inpatient stay (hence abbreviation “cis”). cis_marker field used label stays, can thus used identify episodes belonging stay. case, episode_within_cis tells us order episodes within stay; information always present, though. table snippet, one patient: 3 distinct stays; second comprises 2 episodes. information can tricky perform filtering , admission_date discharge_date pertain episode, often interested stay-level data: example, patient first admitted hospital. Consider following question: many stays patient since 5 January 2016 diagnosis “B”? patient table, answer 2: 2016 2017 stays diagnosis “B”, stays ended 5 January 2016. naively try perform calculation without accounting dates, write something like json_examples/preprocessing1.json: Running give: got value 1, incorrect! gives? happens, filter applied episode, first episode 2016 stay ended 5 January, counted data. second episode 2016 stay also removed diagnosis “B”. third stay, 2017, counted.","code":"input_table <- data.frame(   id = c(1, 1, 1, 1),   admission_date = as.Date(c(     \"2015-01-01\", \"2016-01-01\", \"2016-01-04\", \"2017-01-01\"   )),   discharge_date = as.Date(c(     \"2015-01-05\", \"2016-01-04\", \"2016-01-08\", \"2017-01-08\"   )),   cis_marker = c(1, 2, 2, 3),   episode_within_cis = c(1, 1, 2, 1),   diagnosis = c(\"A\", \"B\", \"C\", \"B\") )  input_table #>   id admission_date discharge_date cis_marker episode_within_cis diagnosis #> 1  1     2015-01-01     2015-01-05          1                  1         A #> 2  1     2016-01-01     2016-01-04          2                  1         B #> 3  1     2016-01-04     2016-01-08          2                  2         C #> 4  1     2017-01-01     2017-01-08          3                  1         B {     \"output_feature_name\": \"naive\",     \"transformation_type\": \"nunique\",     \"source_file\": \"input_table\",     \"aggregation_column\": \"cis_marker\",     \"grouping_column\": \"id\",     \"absent_default_value\": 0,     \"filter\": {         \"type\": \"and\",         \"subfilter\": {             \"date_filter\": {                 \"column\": \"discharge_date\",                 \"type\": \"date_gt_eq\",                 \"value\": \"2016-01-05\"             },             \"diagnosis_filter\": {                 \"column\": \"diagnosis\",                 \"type\": \"in\",                 \"value\": [\"B\"]             }         }     } } results <- run_pipeline(   data_sources = list(input_table = input_table),   feature_filenames = \"json_examples/preprocessing1.json\" )  results$features #>   id naive #> 1  1     1"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/preprocessing.html","id":"preprocessing-specification","dir":"Articles","previous_headings":"","what":"Preprocessing specification","title":"Preprocessing","text":"way eider approaches issue allow users preprocess data. accomplished specifying preprocess object feature JSON. case, merge episode dates stays, can say like: unique pair id cis_marker, replace value admission date earliest episodes, replace discharge date replaced latest episodes. dplyr terms, one write pipeline like : Notice dates episodes stay 2 now , reflect overall dates stay. Returning eider library, information (unsurprisingly) specified JSON. Including preprocess object feature cause input table modified : preprocess object contains one mandatory key: (array strings) \"\": names columns data grouped preprocessing several optional keys can provided, corresponding operations performed. keys refer column names: (array strings) \"retain_min\": retain minimum value within group (array strings) \"retain_max\": retain maximum value within group (array strings) \"replace_with_sum\": sum values within group replace original values sum Columns may specified one keys (.e., preprocess column twice).","code":"processed_table <- input_table %>%   dplyr::group_by(id, cis_marker) %>%   dplyr::mutate(     admission_date = min(admission_date),     discharge_date = max(discharge_date)   ) %>%   dplyr::ungroup()  processed_table #> # A tibble: 4 × 6 #>      id admission_date discharge_date cis_marker episode_within_cis diagnosis #>   <dbl> <date>         <date>              <dbl>              <dbl> <chr>     #> 1     1 2015-01-01     2015-01-05              1                  1 A         #> 2     1 2016-01-01     2016-01-08              2                  1 B         #> 3     1 2016-01-01     2016-01-08              2                  2 C         #> 4     1 2017-01-01     2017-01-08              3                  1 B {   \"preprocess\": {     \"on\": [\"id\", \"cis_marker\"],     \"retain_min\": [\"admission_date\"],     \"retain_max\": [\"discharge_date\"]   }, }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/preprocessing.html","id":"returning-to-the-example","dir":"Articles","previous_headings":"","what":"Returning to the example","title":"Preprocessing","text":"can now rewrite feature JSON include preprocessing step (json_examples/preprocessing2.json): rerunning pipeline gives us correct value 2. Note although preprocess object placed filter object JSON, preprocessing always done prior filtering. order keys JSON effect whatsoever result.","code":"{     \"output_feature_name\": \"correct\",     \"transformation_type\": \"nunique\",     \"source_file\": \"input_table\",     \"aggregation_column\": \"cis_marker\",     \"grouping_column\": \"id\",     \"absent_default_value\": 0,     \"filter\": {         \"type\": \"and\",         \"subfilter\": {             \"date_filter\": {                 \"column\": \"discharge_date\",                 \"type\": \"date_gt_eq\",                 \"value\": \"2016-01-05\"             },             \"diagnosis_filter\": {                 \"column\": \"diagnosis\",                 \"type\": \"in\",                 \"value\": [\"B\"]             }         }     },     \"preprocess\": {         \"on\": [\"id\", \"cis_marker\"],         \"retain_min\": [\"admission_date\"],         \"retain_max\": [\"discharge_date\"]     } } results <- run_pipeline(   data_sources = list(input_table = input_table),   feature_filenames = \"json_examples/preprocessing2.json\" )  results$features #>   id correct #> 1  1       2"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/preprocessing.html","id":"an-example-for-replace_with_sum","dir":"Articles","previous_headings":"","what":"An example for replace_with_sum","title":"Preprocessing","text":"motivate use replace_with_sum, can add column previous data frame denote length episode: Now consider different question, : many stays patient lasted week ? answer , need first sum days stay, can filter based sum. accomplished json_examples/preprocessing3.json:","code":"input_table_with_sum <- input_table %>%   dplyr::mutate(days = as.numeric(discharge_date - admission_date))  input_table_with_sum #>   id admission_date discharge_date cis_marker episode_within_cis diagnosis days #> 1  1     2015-01-01     2015-01-05          1                  1         A    4 #> 2  1     2016-01-01     2016-01-04          2                  1         B    3 #> 3  1     2016-01-04     2016-01-08          2                  2         C    4 #> 4  1     2017-01-01     2017-01-08          3                  1         B    7 {     \"output_feature_name\": \"using_sum\",     \"transformation_type\": \"nunique\",     \"source_file\": \"input_table\",     \"aggregation_column\": \"cis_marker\",     \"grouping_column\": \"id\",     \"absent_default_value\": 0,     \"filter\": {         \"column\": \"days\",         \"type\": \"gt_eq\",         \"value\": 7     },     \"preprocess\": {         \"on\": [\"id\", \"cis_marker\"],         \"replace_with_sum\": [\"days\"]     } } results <- run_pipeline(   data_sources = list(input_table = input_table_with_sum),   feature_filenames = \"json_examples/preprocessing3.json\" )  results$features #>   id using_sum #> 1  1         2"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/prescribing.html","id":"prescribing-data","dir":"Articles","previous_headings":"","what":"1. Prescribing data","title":"Prescribing Example","text":"random example prescribing data file. first rows can see patient id 19 3 items bnf_section 0106 prescribed 15th December 2017, 5 items bnf_section 0103 prescribed 11th August 2016, 1 item bnf_section 0103 7th July 2015.","code":"prescribing_data_filepath <- eider_example(\"random_pis_data.csv\") utils::read.csv(prescribing_data_filepath) #>     id  paid_date bnf_section num_items #> 1   19 2017-12-15         113         3 #> 2   19 2016-08-11         106         5 #> 3   19 2015-07-07         105         1 #> 4    7 2017-03-14         112         1 #> 5    3 2015-08-07         111         1 #> 6   18 2016-05-07         106         3 #> 7    2 2016-09-29         108         4 #> 8    5 2015-12-01         104         3 #> 9    2 2017-01-11         109         1 #> 10   6 2017-11-04         110         4 #> 11  10 2016-01-22         109         4 #> 12   2 2017-04-03         115         5 #> 13  15 2015-11-02         107         3 #> 14   4 2016-06-01         114         5 #> 15  15 2015-05-01         104         1 #> 16   6 2016-05-16         105         2 #> 17  15 2017-01-05         110         4 #> 18  19 2017-03-28         112         2 #> 19  19 2015-12-12         114         3 #> 20   5 2017-07-26         106         1 #> 21  11 2016-07-23         116         6 #> 22   8 2015-11-18         106         2 #> 23   5 2015-10-01         102         4 #> 24  12 2017-03-14         118         3 #> 25  17 2016-07-08         119         3 #> 26  17 2017-06-05         106         1 #> 27  12 2017-04-29         101         2 #> 28  17 2017-08-30         119         3 #> 29  10 2015-09-28         101         1 #> 30  13 2015-01-28         104         4 #> 31  19 2016-04-03         111         2 #> 32  13 2016-07-15         111         2 #> 33   0 2017-01-12         115         4 #> 34  14 2016-11-02         108         2 #> 35  14 2017-02-22         104         3 #> 36   4 2015-11-04         116         5 #> 37  17 2015-05-12         107         4 #> 38   3 2016-05-10         103         3 #> 39  15 2015-10-02         108         1 #> 40  17 2016-08-05         119         2 #> 41   9 2016-11-11         118         1 #> 42   1 2017-12-19         114         2 #> 43   3 2017-05-26         112         6 #> 44  13 2015-01-07         104         1 #> 45   0 2016-11-08         118         4 #> 46  13 2015-08-09         114         4 #> 47   2 2016-04-05         119         4 #> 48  12 2015-10-09         102         1 #> 49  10 2015-01-31         102         5 #> 50   1 2016-01-09         111         3 #> 51   3 2017-04-09         114         3 #> 52  19 2015-02-28         102         3 #> 53   8 2017-12-14         110         4 #> 54   8 2015-12-24         101         6 #> 55   9 2017-03-27         112         2 #> 56  10 2015-08-06         108         2 #> 57   3 2015-05-10         119         3 #> 58   0 2017-06-27         114         2 #> 59  12 2016-08-19         110         2 #> 60   5 2016-11-29         114         3 #> 61  13 2016-04-02         114         4 #> 62  17 2015-04-04         113         3 #> 63   8 2015-01-25         116         3 #> 64   8 2015-08-30         112         3 #> 65   3 2015-03-20         103         2 #> 66  14 2017-01-16         117         3 #> 67  13 2016-01-17         117         2 #> 68  18 2015-05-28         111         6 #> 69  15 2016-05-13         115         4 #> 70   3 2017-11-14         102         2 #> 71  16 2015-03-24         118         2 #> 72  19 2015-05-30         103         2 #> 73   7 2017-07-13         101         4 #> 74   3 2017-05-24         119         7 #> 75  17 2015-02-06         109         3 #> 76  18 2016-06-30         116         3 #> 77  19 2017-12-26         105         3 #> 78   1 2015-11-30         101         3 #> 79  17 2017-04-05         115         3 #> 80   9 2015-09-14         118         4 #> 81   8 2017-11-24         101         4 #> 82  16 2017-09-05         113         4 #> 83  18 2016-07-30         103         3 #> 84   5 2016-02-18         118         4 #> 85  15 2017-09-25         118         6 #> 86  17 2015-03-25         103         3 #> 87  17 2015-07-27         116         2 #> 88  19 2015-02-07         112         3 #> 89   6 2016-03-02         104         2 #> 90  16 2016-05-20         110         2 #> 91   8 2017-06-22         107         3 #> 92   8 2017-08-15         104         3 #> 93  15 2016-10-15         117         2 #> 94   7 2016-01-20         102         5 #> 95  15 2017-09-12         102         3 #> 96   9 2017-06-21         113         3 #> 97   0 2015-08-17         105         4 #> 98   1 2017-11-04         101         2 #> 99  15 2016-06-07         117         3 #> 100  4 2015-03-15         105         1"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/prescribing.html","id":"specification-file---number-of-unique","dir":"Articles","previous_headings":"","what":"2. Specification file - Number of unique","title":"Prescribing Example","text":"specification file defining number unique instances bnf_section column (called “aggregation_column” specification) grouped patient id. , entries patient 19 data file, 2 unique entries. date filtering applied, case 1st January 2015 1st January 2018 inclusive.","code":"prescribing_spec_nunique_fp <- eider_example(   \"spec_example_basic_prescribing_nunique.json\" ) #> Error in system.file(\"extdata\", file, package = current_package_name, : no file found writeLines(readLines(prescribing_spec_nunique_fp)) #> Error in eval(expr, envir, enclos): object 'prescribing_spec_nunique_fp' not found"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/prescribing.html","id":"run-transformation---number-of-unique","dir":"Articles","previous_headings":"","what":"3. Run transformation - Number of unique","title":"Prescribing Example","text":"results transformation shown - patient id 0 3 unique values bnf_section, patient id 19 ultimately ended 5 unique selections specified time period.","code":"prescribing_data_path <- list(prescribing = prescribing_data_filepath) run_pipeline(prescribing_data_path, prescribing_spec_nunique_fp) #> Error in eval(expr, envir, enclos): object 'prescribing_spec_nunique_fp' not found"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/prescribing.html","id":"number-of-prescibed-items","dir":"Articles","previous_headings":"","what":"4. Number of prescibed items","title":"Prescribing Example","text":"following specification can used return number prescribed items, per patient specified date range. corresponding transformation","code":"prescribing_spec_npresc_fp <- eider_example(   \"spec_example_basic_prescribing_nprescribed.json\" ) #> Error in system.file(\"extdata\", file, package = current_package_name, : no file found writeLines(readLines(prescribing_spec_npresc_fp)) #> Error in eval(expr, envir, enclos): object 'prescribing_spec_npresc_fp' not found run_pipeline(prescribing_data_path, prescribing_spec_npresc_fp) #> Error in eval(expr, envir, enclos): object 'prescribing_spec_npresc_fp' not found"},{"path":"https://alan-turing-institute.github.io/eider/docs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Catalina Vallejos. Contributor. Louis Aslett. Contributor. Simon Rogers. Contributor. Camila Rangel Smith. Maintainer, contributor. Helen Duncan Little. Author. Jonathan Yong. Author.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Duncan Little H, Yong J (2024). eider: Declarative feature extraction tabular records data. R package version 0.0.1.0.","code":"@Manual{,   title = {eider: Declarative feature extraction from tabular records data},   author = {Helen {Duncan Little} and Jonathan Yong},   year = {2024},   note = {R package version 0.0.1.0}, }"},{"path":"https://alan-turing-institute.github.io/eider/docs/index.html","id":"eider-","dir":"","previous_headings":"","what":"Declarative feature extraction from tabular records data","title":"Declarative feature extraction from tabular records data","text":"eider R package extracting machine learning features tabular data, particular health records, declarative manner. Features specified JSON objects contain necessary information required perform given calculation. example, following calculates number total rows per patient id table labelled ae2 (details specify table function documentation). output column named total_ae_attendances, containing number rows per patient, value 0 patients appear ae2 table. declarative approach provides alternative traditional, imperative-style, dplyr pipelines can difficult reason , especially series features extracted merged together. features specified without reference specific programming language paradigm, also encourages code concise, easy read, maintainable. eider collaboration Alan Turing Institute, Public Health Scotland, Universities Edinburgh Durham. grew desire generalise feature extraction process health data, specifically SPARRA (Scottish Patients Risk Readmission Admission) project (GitHub repo), allow similar analyses carried different contexts.","code":"{   \"source_file\": \"ae2\",   \"transformation_type\": \"COUNT\",   \"grouping_column\": \"id\",   \"absent_default_value\": 0,   \"output_feature_name\": \"total_ae_attendances\" }"},{"path":"https://alan-turing-institute.github.io/eider/docs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Declarative feature extraction from tabular records data","text":"can install eider GitHub using: plan submit eider CRAN near future.","code":"install.packages(\"devtools\") devtools::install_github(\"alan-turing-institute/eider\")"},{"path":"https://alan-turing-institute.github.io/eider/docs/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Declarative feature extraction from tabular records data","text":"package documentation available online. particular, package articles contain series vignettes provide detailed guidance package features.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Declarative feature extraction from tabular records data","text":"making changes library , first clone repository: need install lintr, pkgdown, devtools R packages build documentation, run tests, lint. , repository root, can use following commands: make doc generates function documentation, also generates README.md file README.rmd make lint lints project directory make test runs tests can also use pre-commit run committing, ensure commit incomplete code. Firstly, install pre-commit according instructions webpage . run pre-commit install. vignettes? Well, building vignettes slightly complicated. can perform one-time build R console using pkgdown::build_site(), running every time edit file gets tiring quickly. automate , first install package make install, install working version Python also entr (latter available Homebrew via brew install entr). run make vig: monitor vignette RMarkdown files, rebuild vignettes time changed, launch HTTP server port 8000 view files. change library code run make install rerunning make vig.","code":"git clone git@github.com:alan-turing-institute/eider.git"},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider-package.html","id":null,"dir":"Reference","previous_headings":"","what":"eider: Declarative feature extraction from tabular records data — eider-package","title":"eider: Declarative feature extraction from tabular records data — eider-package","text":"eider lightweight package processing tabular data declarative fashion. get started, see: vignette(\"eider\")","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"eider: Declarative feature extraction from tabular records data — eider-package","text":"Maintainer: Camila Rangel Smith crangelsmith@turing.ac.uk (ORCID) [contributor] Authors: Helen Duncan Little hduncan@turing.ac.uk (ORCID) Jonathan Yong jyong@turing.ac.uk (ORCID) contributors: Catalina Vallejos catalina.vallejos@ed.ac.uk (ORCID) [contributor] Louis Aslett louis.aslett@durham.ac.uk (ORCID) [contributor] Simon Rogers simon.rogers@nhs.scot (ORCID) [contributor]","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain filepaths to example data and JSON features — eider_example","title":"Obtain filepaths to example data and JSON features — eider_example","text":"Return absolute path example data JSON features provided package. files contained package inst/extdata directory.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain filepaths to example data and JSON features — eider_example","text":"","code":"eider_example(file = NULL)"},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain filepaths to example data and JSON features — eider_example","text":"file filename return full path . NULL, return vector valid filenames.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain filepaths to example data and JSON features — eider_example","text":"string containing full path file, vector filenames","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain filepaths to example data and JSON features — eider_example","text":"","code":"eider_example() #> [1] \"ae_attendances_neurology_2017.json\" \"ae_total_attendances.json\"          #> [3] \"old\"                                \"random_ae_data.csv\"                 #> [5] \"random_ltc_data.csv\"                \"random_pis_data.csv\"                #> [7] \"random_smr04_data.csv\"              eider_example(\"random_ae_data.csv\") #> [1] \"/tmp/RtmpKr2KrJ/temp_libpath1924c178b15/eider/extdata/random_ae_data.csv\""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/run_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform the entire feature transformation process — run_pipeline","title":"Perform the entire feature transformation process — run_pipeline","text":"Please see package articles usage examples.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/run_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform the entire feature transformation process — run_pipeline","text":"","code":"run_pipeline(   data_sources,   feature_filenames = NULL,   response_filenames = NULL,   all_ids = NULL )"},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/run_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform the entire feature transformation process — run_pipeline","text":"data_sources list, whose names unique identifiers data sources, whose values either data frame file path read . CSV files supported point time. feature_filenames vector file paths feature JSON specifications. Defaults NULL. response_filenames vector file paths response JSON specifications. Defaults NULL. all_ids vector unique numeric identifiers final feature table. given, determined taking union unique identifiers found input tables used least one feature.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/run_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform the entire feature transformation process — run_pipeline","text":"list following elementss: features: data frame features. first column ID column, always name id. Subsequent columns features, column names specified output_feature_name field JSON files. responses: data frame responses. structure features data frame.","code":""}]
