[{"path":"https://alan-turing-institute.github.io/eider/docs/CODE_OF_CONDUCT.html","id":"diversity-statement","dir":"","previous_headings":"","what":"Diversity Statement","title":"NA","text":"encourage everyone participate committed building project . Although fail times, seek treat everyone fairly equally possible. Whenever member made mistake, expect take responsibility . someone harmed offended, responsibility listen carefully respectfully, best right wrong. Although list exhaustive, explicitly honour diversity age, gender, gender identity expression, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, technical ability. tolerate discrimination based protected characteristics , including participants visible invisible disabilities.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"NA","text":"Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behaviour include: Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting use sexualised language imagery, sexual attention advances kind","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"NA","text":"Code Conduct applies members participating activities, events processes taking place within scope repository. Specifically, Code Conduct applies conduct: - interactions within team/community maintaining repo - team activity, communication event related repo - outside team activity team member representing project - members outside team engaging GitHub repository. Code Conduct also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"NA","text":"Code Conduct uses template created maintained Turing Way team members shared CC-4.0 reuse: https://github.com/alan-turing-institute/reproducible-project-template","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"eider","title":"eider","text":"Reincarnation SPARRA new bird","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CONTRIBUTING.html","id":"package-documentation","dir":"","previous_headings":"","what":"Package documentation","title":"eider","text":"https://alan-turing-institute.github.io/eider/docs/","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/CONTRIBUTING.html","id":"setting-up-pre-commit","dir":"","previous_headings":"","what":"Setting up pre-commit","title":"eider","text":"Installation : done, every time commit, automatically run devtools::document(). document() generated new files (.e. hadn’t run document() committing), commit go : manually git add new files commit .","code":"pip install pre-commit   # or brew install pre-commit install"},{"path":"https://alan-turing-institute.github.io/eider/docs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 eider authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"decide-what-you-want-to-filter-for","dir":"Articles","previous_headings":"Process pipeline","what":"0. Decide what you want to filter for","title":"A & E Example","text":"eider designed process (Scottish) medical data collate using range filter functions allow users easily extract tables ML pipelines. Argubly first step decide data use, filter . eider allows users specify range data sources (files/tables) define features want extract data via specification json. eider filter join data per spec.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"read-in-data","dir":"Articles","previous_headings":"Process pipeline","what":"1. Read in data","title":"A & E Example","text":"example use random &E-type data stored csv file, filter based 2 categories. attendance_type column diagnosis_1 column. data can derived multiple sources, joined subsequently. step must done feature extraction avoid read table multiple times. utilising MINISPARRA’s example data accessed via eider_examples(\"random_ae_data.csv\") snippet table shown . table 6 columns, patient id id, date TODO update header admission occured, attendance_type, three diagnosis categories, diagnosis_1, diagnosis_2, diagnosis_3 first row example can see patient 2 admitted 16th August 2016, 3 unique diagnoses, 104, 103, 102. second row, patient id admitted 28th July 2015, 3 unique diagnosis, time 101, 103, 104.","code":"ae_data_filepath <- eider_example(\"random_ae_data.csv\") read.csv(ae_data_filepath) #>     id       time attendance_category diagnosis_1 diagnosis_2 diagnosis_3 #> 1    2 2016-08-16                   1         104         103         102 #> 2    2 2015-07-28                   1         101         103         104 #> 3   16 2017-09-20                   1         102         101         104 #> 4   10 2016-03-25                   1         104         103         101 #> 5    5 2016-09-20                   1         103         104         101 #> 6    6 2016-02-11                   1         103         102         101 #> 7   14 2016-02-14                   1         102         103         104 #> 8   14 2015-11-09                   1         104         103         102 #> 9   14 2016-03-24                   1         102         101         104 #> 10   1 2015-07-01                   1         103         104         101 #> 11   9 2015-11-02                   1         103         102         104 #> 12   3 2017-10-25                   1         102         103         101 #> 13  15 2017-06-12                   1         104         101         102 #> 14   0 2017-12-22                   1         102         101         104 #> 15   3 2016-10-28                   1         102         103         104 #> 16   7 2016-09-06                   1         101         102         104 #> 17  18 2017-08-26                   1         102         101          NA #> 18  15 2016-09-04                   1         103         104         102 #> 19   6 2015-10-22                   1         101         103         104 #> 20   2 2017-11-20                   1         103         101         104 #> 21  14 2017-03-26                   1         104         105         101 #> 22   8 2017-01-15                   1         101          NA          NA #> 23   0 2016-08-06                   1         101         104         103 #> 24  13 2015-02-23                   1         104         103         101 #> 25   6 2017-02-12                   1         103         102         104 #> 26   2 2015-11-12                   1         103         104         101 #> 27  13 2016-10-16                   1         102         104         103 #> 28   0 2016-03-18                   1         104         103         101 #> 29  17 2015-07-23                   1         102         103         104 #> 30   0 2016-03-06                   1         104         103         102 #> 31   8 2015-07-12                   1         101         103         102 #> 32  11 2015-08-29                   1         104         105         102 #> 33   0 2017-11-19                   1         104         101         103 #> 34   5 2016-03-06                   1         103         102         104 #> 35   8 2017-09-27                   1         104         101         102 #> 36  13 2017-02-19                   1         102         101         104 #> 37   6 2016-08-24                   1         103         102         104 #> 38   4 2017-05-18                   1         101         100         103 #> 39  14 2016-01-07                   1         104         102         101 #> 40  10 2017-08-11                   1         102         104          NA #> 41  13 2017-09-04                   1         103         101         104 #> 42  17 2015-07-20                   1         101         103         102 #> 43   1 2015-11-28                   1         101         102         103 #> 44  11 2016-04-16                   1         101         104         102 #> 45  13 2016-04-19                   1         104         103         102 #> 46  12 2015-06-14                   1         103         101         104 #> 47  19 2015-12-24                   1         102         103         104 #> 48  19 2015-10-30                   1         103         101         102 #> 49   2 2017-04-10                   1         103         101         104 #> 50   6 2015-03-07                   1         103         102         104 #> 51   6 2016-01-27                   1         101         100         104 #> 52   8 2016-11-24                   1         103         102         104 #> 53  10 2015-11-24                   1         102          NA          NA #> 54  12 2015-11-18                   1         103         101         102 #> 55   9 2017-04-18                   1         103         104         102 #> 56   9 2017-09-14                   1         103          NA          NA #> 57   8 2015-06-07                   1         103         101         102 #> 58  11 2015-11-14                   1         102         101         103 #> 59   5 2017-05-03                   1         104         101         103 #> 60   0 2015-04-02                   1         104         103         101 #> 61  17 2016-11-29                   1         102         103         101 #> 62  10 2016-05-07                   1         101         100         102 #> 63  17 2015-12-10                   1         103         102         101 #> 64   5 2015-08-19                   1         101         102         103 #> 65  14 2016-10-12                   1         101         102          NA #> 66   7 2016-11-09                   1         101         102         103 #> 67  13 2015-01-13                   1         101         104          NA #> 68  15 2016-08-11                   1         102         103         104 #> 69  19 2016-05-19                   1         103         102         104 #> 70   6 2017-10-11                   1         103         102         101 #> 71   7 2016-12-22                   1         103         104         102 #> 72  17 2015-12-21                   1         104         103         102 #> 73  17 2015-08-30                   1         101         102         104 #> 74  13 2017-03-30                   1         103         101         104 #> 75  17 2017-01-02                   1         104         101          NA #> 76  15 2017-05-24                   1         104         102         101 #> 77   3 2017-01-10                   1         103         102         104 #> 78  12 2015-02-25                   1         104         102         101 #> 79   1 2017-12-22                   1         103         101         102 #> 80  19 2015-10-12                   1         101         104         102 #> 81   4 2015-09-29                   1         101         104         103 #> 82  18 2017-03-24                   1         101         104         103 #> 83  10 2016-05-28                   1         102         101         103 #> 84  17 2016-12-04                   1         104          NA          NA #> 85  18 2017-02-19                   1         103         102         104 #> 86  15 2017-01-05                   1         104         103         101 #> 87   1 2017-04-28                   1         104         102         101 #> 88   0 2016-04-08                   1         101         103         104 #> 89  12 2017-11-11                   1         102         103         104 #> 90   0 2015-02-23                   1         103         104         102 #> 91  12 2016-07-23                   1         103         101         104 #> 92  16 2015-09-07                   1         102         101         104 #> 93  19 2015-04-15                   1         101         102         104 #> 94  19 2016-06-04                   1         103         102         104 #> 95   7 2016-05-10                   1         101         103         102 #> 96  13 2016-03-20                   1         104         103         102 #> 97   0 2016-03-26                   1         102          NA          NA #> 98   7 2017-07-20                   1         101         102         103 #> 99   7 2016-11-16                   1         101         104          NA #> 100 12 2017-07-24                   1         101          NA          NA"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"define-a-feature-to-extract","dir":"Articles","previous_headings":"Process pipeline","what":"2. Define a feature to extract","title":"A & E Example","text":"Users specify features like extract data. simple specification file given . source_file name corresponding filepath named list (case random &E data). transformation_type type transformation take place. eider N different transformation types, X, Y, Z. user specifies data grouped via grouping_column, case grouping patient ID. (optional) flag data absent given - report 0. output_feature_name defines header column output dataframe contain results specific transformation primary_filter , two subfilters. first subfilter - subfilter_1 specifies user wants filter based attendance_category column random &E-type data, value interested 1. return results attendance_category 1. second subfilter subfilter_2 filters based diagnosis_1 column return results diagnosis_1 101. primary filter , resultant dataframe count, grouped patient id &E data attendance_category = 1 diagnosos_1 = 101.","code":"basic_ae_spec_filepath <- eider_example(\"spec_basic_ae_data.json\") writeLines(readLines(basic_ae_spec_filepath)) #> { #>   \"source_file\": \"ae2\", #>   \"transformation_type\": \"COUNT\", #>   \"grouping_column\": \"id\", #>   \"absent_default_value\": 0, #>   \"output_feature_name\": \"user_defined_name\", #>   \"primary_filter\": { #>     \"type\": \"AND\", #>     \"subfilters\": { #>       \"subfilter_1\": { #>         \"column\": \"attendance_category\", #>         \"type\": \"IN\", #>         \"value\": [1] #>       }, #>       \"subfilter_2\": { #>         \"column\": \"diagnosis_1\", #>         \"type\": \"IN\", #>         \"value\": [101] #>       } #>     } #>   } #> }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"extract-the-feature","dir":"Articles","previous_headings":"Process pipeline","what":"3. Extract the feature","title":"A & E Example","text":"Now can use eider run transformation pipeline. specify path data via all_table_filenames path specification via all_feature_json_filenames. run transformation produce resultant dataframe. resultant dataframe. can see patient id 2 1 instance diagnosis_1 101, whereas patient id 7 5 instances. also noted patients id 3, 9, 15, 16 either fit given filtering criteria occurences source data. patient’s resultant column value absent_default_value specification.","code":"ae_data_path <- list(ae2 = ae_data_filepath) # Note the name ae2 is used in the spec example `source_file` above run_pipeline(ae_data_path, basic_ae_spec_filepath) #> $features #>    id user_defined_name #> 1   0                 2 #> 2   1                 1 #> 3   2                 1 #> 4   3                 0 #> 5   4                 2 #> 6   5                 1 #> 7   6                 2 #> 8   7                 5 #> 9   8                 2 #> 10  9                 0 #> 11 10                 1 #> 12 11                 1 #> 13 12                 1 #> 14 13                 1 #> 15 14                 1 #> 16 15                 0 #> 17 16                 0 #> 18 17                 2 #> 19 18                 1 #> 20 19                 2 #>  #> $responses #>    id #> 1   0 #> 2   1 #> 3   2 #> 4   3 #> 5   4 #> 6   5 #> 7   6 #> 8   7 #> 9   8 #> 10  9 #> 11 10 #> 12 11 #> 13 12 #> 14 13 #> 15 14 #> 16 15 #> 17 16 #> 18 17 #> 19 18 #> 20 19"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"using-date-filtering","dir":"Articles","previous_headings":"Process pipeline","what":"4. Using date filtering","title":"A & E Example","text":"example returned dataframe spanned dates input data csv spanned. However can refined specification. additonal subfilter added. Subfilter_3 applied time column filters based dates greater 31st December 2015. means event happened new-years-eve 2015 included data, events occured new-years-day 2016 . Also note absent_default_value now removed, descriptive output_feature_name given specification. can run transformation pipeline &E data: note patient id 2 now entries resultant table. expected noted patient 2 one instance diagnosis_1 101, inspection source data, can see 28th July 2015.","code":"basic_ae_spec_w_date_filepath <-   eider_example(\"spec_example_basic_ae_data_w_date.json\") writeLines(readLines(basic_ae_spec_w_date_filepath)) #> { #>   \"source_file\": \"ae2\", #>   \"transformation_type\": \"COUNT\", #>   \"grouping_column\": \"id\", #>   \"output_feature_name\": \"patients_w_diag_1_in_date_range\", #>   \"primary_filter\": { #>     \"type\": \"AND\", #>     \"subfilters\": { #>       \"subfilter_1\": { #>         \"column\": \"attendance_category\", #>         \"type\": \"IN\", #>         \"value\": [1] #>       }, #>       \"subfilter_2\": { #>         \"column\": \"diagnosis_1\", #>         \"type\": \"IN\", #>         \"value\": [101] #>       }, #>       \"subfilter_3\": { #>         \"column\": \"time\", #>         \"type\": \"date_gt\", #>         \"value\": [\"2015-12-31\"] #>       } #>     } #>   } #> } run_pipeline(ae_data_path, basic_ae_spec_w_date_filepath) #> $features #>    id patients_w_diag_1_in_date_range #> 1   0                               2 #> 2   1                              NA #> 3   2                              NA #> 4   3                              NA #> 5   4                               1 #> 6   5                              NA #> 7   6                               1 #> 8   7                               5 #> 9   8                               1 #> 10  9                              NA #> 11 10                               1 #> 12 11                               1 #> 13 12                               1 #> 14 13                              NA #> 15 14                               1 #> 16 15                              NA #> 17 16                              NA #> 18 17                              NA #> 19 18                               1 #> 20 19                              NA #>  #> $responses #>    id #> 1   0 #> 2   1 #> 3   2 #> 4   3 #> 5   4 #> 6   5 #> 7   6 #> 8   7 #> 9   8 #> 10  9 #> 11 10 #> 12 11 #> 13 12 #> 14 13 #> 15 14 #> 16 15 #> 17 16 #> 18 17 #> 19 18 #> 20 19"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"using-or-filter","dir":"Articles","previous_headings":"Process pipeline","what":"5. Using OR filter","title":"A & E Example","text":"can also expand filters return results either diagnosis_1 diagnosis_2 101. specification file look like : Subfilter 2 now defined type, contains ’s subfilters, 21 22. subfilter_21 filter diagnosis_1 column 101, subfilter_22 filter diagnosis_2 column 101. transformation count instance either diagnosis_1 diagnosis_2 101. Subject filters attendence_type 1, date later 31st December 2015. see patient 14 2 instances either diagnosis_1 diagnosis_2 101 attendence_type 1, dates later 31st December 2015.","code":"ae_spec_or_w_date_fp <- eider_example(   \"spec_example_basic_ae_data_or_w_date.json\" ) writeLines(readLines(ae_spec_or_w_date_fp)) #> { #>   \"source_file\": \"ae2\", #>   \"transformation_type\": \"COUNT\", #>   \"grouping_column\": \"id\", #>   \"output_feature_name\": \"using_or_filter\", #>   \"primary_filter\": { #>     \"type\": \"AND\", #>     \"subfilters\": { #>       \"subfilter_1\": { #>         \"column\": \"attendance_category\", #>         \"type\": \"IN\", #>         \"value\": [1] #>       }, #>       \"subfilter_2\": { #>         \"type\": \"OR\", #>         \"subfilters\": { #>           \"subfilter_21\": { #>             \"column\": \"diagnosis_1\", #>             \"type\": \"IN\", #>             \"value\": [101] #>           }, #>           \"subfilter_22\": { #>             \"column\": \"diagnosis_2\", #>             \"type\": \"IN\", #>             \"value\": [101] #>           } #>         } #>       }, #>       \"subfilter_3\": { #>         \"column\": \"time\", #>         \"type\": \"date_gt\", #>         \"value\": [\"2015-12-31\"] #>       } #>     } #>   } #> } run_pipeline(ae_data_path, ae_spec_or_w_date_fp) #> $features #>    id using_or_filter #> 1   0               4 #> 2   1               1 #> 3   2               2 #> 4   3              NA #> 5   4               1 #> 6   5               1 #> 7   6               1 #> 8   7               5 #> 9   8               2 #> 10  9              NA #> 11 10               2 #> 12 11               1 #> 13 12               2 #> 14 13               3 #> 15 14               2 #> 16 15               1 #> 17 16               1 #> 18 17               1 #> 19 18               2 #> 20 19              NA #>  #> $responses #>    id #> 1   0 #> 2   1 #> 3   2 #> 4   3 #> 5   4 #> 6   5 #> 7   6 #> 8   7 #> 9   8 #> 10  9 #> 11 10 #> 12 11 #> 13 12 #> 14 13 #> 15 14 #> 16 15 #> 17 16 #> 18 17 #> 19 18 #> 20 19"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"logging","dir":"Articles","previous_headings":"Process pipeline","what":"6. Logging","title":"A & E Example","text":"Logging also present throughout package. default, logs printed console, order see log output , need capture temporary file: first basic example run . Reminder specification: transformation pipeline run - completeness result. Check log: Lines 1-2 report checks specification, Line 4 primary filter parsed, two subfilters identified nested filter. two subfilters (contain subfilters) parsed, reported lines 5 6. Lines 7 -11 give context processed debug purposes including path corresponding specification files (case examples folder package).","code":"library(logger) tmp <- tempfile() log_threshold(TRACE) log_appender(appender_file(tmp)) writeLines(readLines(basic_ae_spec_filepath)) #> { #>   \"source_file\": \"ae2\", #>   \"transformation_type\": \"COUNT\", #>   \"grouping_column\": \"id\", #>   \"absent_default_value\": 0, #>   \"output_feature_name\": \"user_defined_name\", #>   \"primary_filter\": { #>     \"type\": \"AND\", #>     \"subfilters\": { #>       \"subfilter_1\": { #>         \"column\": \"attendance_category\", #>         \"type\": \"IN\", #>         \"value\": [1] #>       }, #>       \"subfilter_2\": { #>         \"column\": \"diagnosis_1\", #>         \"type\": \"IN\", #>         \"value\": [101] #>       } #>     } #>   } #> } run_pipeline(ae_data_path, basic_ae_spec_filepath) #> $features #>    id user_defined_name #> 1   0                 2 #> 2   1                 1 #> 3   2                 1 #> 4   3                 0 #> 5   4                 2 #> 6   5                 1 #> 7   6                 2 #> 8   7                 5 #> 9   8                 2 #> 10  9                 0 #> 11 10                 1 #> 12 11                 1 #> 13 12                 1 #> 14 13                 1 #> 15 14                 1 #> 16 15                 0 #> 17 16                 0 #> 18 17                 2 #> 19 18                 1 #> 20 19                 2 #>  #> $responses #>    id #> 1   0 #> 2   1 #> 3   2 #> 4   3 #> 5   4 #> 6   5 #> 7   6 #> 8   7 #> 9   8 #> 10  9 #> 11 10 #> 12 11 #> 13 12 #> 14 13 #> 15 14 #> 16 15 #> 17 16 #> 18 17 #> 19 18 #> 20 19 readLines(tmp) #>  [1] \"TRACE [2024-03-25 21:06:31] context: read_spec_type\"                                                                                                                                                                                                    #>  [2] \"DEBUG [2024-03-25 21:06:31] context: read_spec_type: Valid filepath found: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_basic_ae_data.json\"                                                                                              #>  [3] \"TRACE [2024-03-25 21:06:31] context: featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_basic_ae_data.json\"                                                                                                                         #>  [4] \"TRACE [2024-03-25 21:06:31] context: parse_nested_filter\"                                                                                                                                                                                               #>  [5] \"TRACE [2024-03-25 21:06:31] context: parse_single_filter\"                                                                                                                                                                                               #>  [6] \"TRACE [2024-03-25 21:06:31] context: parse_single_filter\"                                                                                                                                                                                               #>  [7] \"TRACE [2024-03-25 21:06:31] context: featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_basic_ae_data.json > featurise_count\"                                                                                                       #>  [8] \"DEBUG [2024-03-25 21:06:31] context: featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_basic_ae_data.json > featurise_count > preprocess_table: No preprocessing specified for this feature\"                                       #>  [9] \"TRACE [2024-03-25 21:06:31] context: featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_basic_ae_data.json > featurise_count > filter_and\"                                                                                          #> [10] \"TRACE [2024-03-25 21:06:31] context: featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_basic_ae_data.json > featurise_count > filter_and > (1/2: subfilter_1) > filter_basic\"                                                      #> [11] \"TRACE [2024-03-25 21:06:31] context: featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_basic_ae_data.json > featurise_count > filter_and > (2/2: subfilter_2) > filter_basic\"                                                      #> [12] \"DEBUG [2024-03-25 21:06:31] context: featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_basic_ae_data.json > featurise_count > pad_missing_values: Adding absent_default_value: 0 to any IDs not present in the calculated feature\" #> [13] \"TRACE [2024-03-25 21:06:31] context: join_feature_tables\"                                                                                                                                                                                               #> [14] \"DEBUG [2024-03-25 21:06:31] context: join_feature_tables: List of IDs was not explicitly supplied. Taking the union of all IDs from feature tables.\""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"reading-json-file-as-string","dir":"Articles","previous_headings":"Process pipeline","what":"7. Reading JSON file as string","title":"A & E Example","text":"specification can also provided string instead path JSON file, shown . Apply transformation log identifies user-defined string used instead file processes ","code":"json_string <- '{\"source_file\":[\"ae2\"],\"transformation_type\":[\"COUNT\"], \"grouping_column\":[\"id\"],\"absent_default_value\":[0],\"output_feature_name\" :[\"user_defined_name\"],\"primary_filter\":{\"type\":[\"AND\"],\"subfilters\" :{\"subfilter_1\":{\"column\":[\"attendance_category\"],\"type\":[\"IN\"],\"value\":[1]}, \"subfilter_2\":{\"column\":[\"diagnosis_1\"],\"type\":[\"IN\"],\"value\":[101]}}}}' tmp <- tempfile() log_threshold(TRACE) log_appender(appender_file(tmp)) tf <- run_pipeline(ae_data_path, json_string) tf #> $features #>    id user_defined_name #> 1   0                 2 #> 2   1                 1 #> 3   2                 1 #> 4   3                 0 #> 5   4                 2 #> 6   5                 1 #> 7   6                 2 #> 8   7                 5 #> 9   8                 2 #> 10  9                 0 #> 11 10                 1 #> 12 11                 1 #> 13 12                 1 #> 14 13                 1 #> 15 14                 1 #> 16 15                 0 #> 17 16                 0 #> 18 17                 2 #> 19 18                 1 #> 20 19                 2 #>  #> $responses #>    id #> 1   0 #> 2   1 #> 3   2 #> 4   3 #> 5   4 #> 6   5 #> 7   6 #> 8   7 #> 9   8 #> 10  9 #> 11 10 #> 12 11 #> 13 12 #> 14 13 #> 15 14 #> 16 15 #> 17 16 #> 18 17 #> 19 18 #> 20 19 readLines(tmp) #>  [1] \"TRACE [2024-03-25 21:06:31] context: read_spec_type\"                                                                                                                                         #>  [2] \"DEBUG [2024-03-25 21:06:31] context: read_spec_type: Specified path is too long for a file, assuming a json string\"                                                                          #>  [3] \"TRACE [2024-03-25 21:06:31] context: featurise: User defined string\"                                                                                                                         #>  [4] \"TRACE [2024-03-25 21:06:31] context: parse_nested_filter\"                                                                                                                                    #>  [5] \"TRACE [2024-03-25 21:06:31] context: parse_single_filter\"                                                                                                                                    #>  [6] \"TRACE [2024-03-25 21:06:31] context: parse_single_filter\"                                                                                                                                    #>  [7] \"TRACE [2024-03-25 21:06:31] context: featurise: User defined string > featurise_count\"                                                                                                       #>  [8] \"DEBUG [2024-03-25 21:06:31] context: featurise: User defined string > featurise_count > preprocess_table: No preprocessing specified for this feature\"                                       #>  [9] \"TRACE [2024-03-25 21:06:31] context: featurise: User defined string > featurise_count > filter_and\"                                                                                          #> [10] \"TRACE [2024-03-25 21:06:31] context: featurise: User defined string > featurise_count > filter_and > (1/2: subfilter_1) > filter_basic\"                                                      #> [11] \"TRACE [2024-03-25 21:06:31] context: featurise: User defined string > featurise_count > filter_and > (2/2: subfilter_2) > filter_basic\"                                                      #> [12] \"DEBUG [2024-03-25 21:06:31] context: featurise: User defined string > featurise_count > pad_missing_values: Adding absent_default_value: 0 to any IDs not present in the calculated feature\" #> [13] \"TRACE [2024-03-25 21:06:31] context: join_feature_tables\"                                                                                                                                    #> [14] \"DEBUG [2024-03-25 21:06:31] context: join_feature_tables: List of IDs was not explicitly supplied. Taking the union of all IDs from feature tables.\""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/a_and_e.html","id":"glossary","dir":"Articles","previous_headings":"Process pipeline","what":"Glossary","title":"A & E Example","text":"“” = %% “lt” = < “lt_eq” = <= “gt” = > “gt_eq” = >= “date_in” = %% “date_lt” = < “date_lt_eq” = <= “date_gt” = > “date_gt_eq” = >=","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combine.html","id":"read-in-data","dir":"Articles","previous_headings":"","what":"1. Read in data","title":"Combine Example","text":"time need two datasets, one &E data one prescribing data. &E data. Note purely illustration purposes, don’t need call read.csv data file transform . prescription data:","code":"ae_data_filepath <- eider_example(\"random_ae_data.csv\") prescribing_data_filepath <- eider_example(\"random_pis_data.csv\") read.csv(ae_data_filepath) #>     id       time attendance_category diagnosis_1 diagnosis_2 diagnosis_3 #> 1    2 2016-08-16                   1         104         103         102 #> 2    2 2015-07-28                   1         101         103         104 #> 3   16 2017-09-20                   1         102         101         104 #> 4   10 2016-03-25                   1         104         103         101 #> 5    5 2016-09-20                   1         103         104         101 #> 6    6 2016-02-11                   1         103         102         101 #> 7   14 2016-02-14                   1         102         103         104 #> 8   14 2015-11-09                   1         104         103         102 #> 9   14 2016-03-24                   1         102         101         104 #> 10   1 2015-07-01                   1         103         104         101 #> 11   9 2015-11-02                   1         103         102         104 #> 12   3 2017-10-25                   1         102         103         101 #> 13  15 2017-06-12                   1         104         101         102 #> 14   0 2017-12-22                   1         102         101         104 #> 15   3 2016-10-28                   1         102         103         104 #> 16   7 2016-09-06                   1         101         102         104 #> 17  18 2017-08-26                   1         102         101          NA #> 18  15 2016-09-04                   1         103         104         102 #> 19   6 2015-10-22                   1         101         103         104 #> 20   2 2017-11-20                   1         103         101         104 #> 21  14 2017-03-26                   1         104         105         101 #> 22   8 2017-01-15                   1         101          NA          NA #> 23   0 2016-08-06                   1         101         104         103 #> 24  13 2015-02-23                   1         104         103         101 #> 25   6 2017-02-12                   1         103         102         104 #> 26   2 2015-11-12                   1         103         104         101 #> 27  13 2016-10-16                   1         102         104         103 #> 28   0 2016-03-18                   1         104         103         101 #> 29  17 2015-07-23                   1         102         103         104 #> 30   0 2016-03-06                   1         104         103         102 #> 31   8 2015-07-12                   1         101         103         102 #> 32  11 2015-08-29                   1         104         105         102 #> 33   0 2017-11-19                   1         104         101         103 #> 34   5 2016-03-06                   1         103         102         104 #> 35   8 2017-09-27                   1         104         101         102 #> 36  13 2017-02-19                   1         102         101         104 #> 37   6 2016-08-24                   1         103         102         104 #> 38   4 2017-05-18                   1         101         100         103 #> 39  14 2016-01-07                   1         104         102         101 #> 40  10 2017-08-11                   1         102         104          NA #> 41  13 2017-09-04                   1         103         101         104 #> 42  17 2015-07-20                   1         101         103         102 #> 43   1 2015-11-28                   1         101         102         103 #> 44  11 2016-04-16                   1         101         104         102 #> 45  13 2016-04-19                   1         104         103         102 #> 46  12 2015-06-14                   1         103         101         104 #> 47  19 2015-12-24                   1         102         103         104 #> 48  19 2015-10-30                   1         103         101         102 #> 49   2 2017-04-10                   1         103         101         104 #> 50   6 2015-03-07                   1         103         102         104 #> 51   6 2016-01-27                   1         101         100         104 #> 52   8 2016-11-24                   1         103         102         104 #> 53  10 2015-11-24                   1         102          NA          NA #> 54  12 2015-11-18                   1         103         101         102 #> 55   9 2017-04-18                   1         103         104         102 #> 56   9 2017-09-14                   1         103          NA          NA #> 57   8 2015-06-07                   1         103         101         102 #> 58  11 2015-11-14                   1         102         101         103 #> 59   5 2017-05-03                   1         104         101         103 #> 60   0 2015-04-02                   1         104         103         101 #> 61  17 2016-11-29                   1         102         103         101 #> 62  10 2016-05-07                   1         101         100         102 #> 63  17 2015-12-10                   1         103         102         101 #> 64   5 2015-08-19                   1         101         102         103 #> 65  14 2016-10-12                   1         101         102          NA #> 66   7 2016-11-09                   1         101         102         103 #> 67  13 2015-01-13                   1         101         104          NA #> 68  15 2016-08-11                   1         102         103         104 #> 69  19 2016-05-19                   1         103         102         104 #> 70   6 2017-10-11                   1         103         102         101 #> 71   7 2016-12-22                   1         103         104         102 #> 72  17 2015-12-21                   1         104         103         102 #> 73  17 2015-08-30                   1         101         102         104 #> 74  13 2017-03-30                   1         103         101         104 #> 75  17 2017-01-02                   1         104         101          NA #> 76  15 2017-05-24                   1         104         102         101 #> 77   3 2017-01-10                   1         103         102         104 #> 78  12 2015-02-25                   1         104         102         101 #> 79   1 2017-12-22                   1         103         101         102 #> 80  19 2015-10-12                   1         101         104         102 #> 81   4 2015-09-29                   1         101         104         103 #> 82  18 2017-03-24                   1         101         104         103 #> 83  10 2016-05-28                   1         102         101         103 #> 84  17 2016-12-04                   1         104          NA          NA #> 85  18 2017-02-19                   1         103         102         104 #> 86  15 2017-01-05                   1         104         103         101 #> 87   1 2017-04-28                   1         104         102         101 #> 88   0 2016-04-08                   1         101         103         104 #> 89  12 2017-11-11                   1         102         103         104 #> 90   0 2015-02-23                   1         103         104         102 #> 91  12 2016-07-23                   1         103         101         104 #> 92  16 2015-09-07                   1         102         101         104 #> 93  19 2015-04-15                   1         101         102         104 #> 94  19 2016-06-04                   1         103         102         104 #> 95   7 2016-05-10                   1         101         103         102 #> 96  13 2016-03-20                   1         104         103         102 #> 97   0 2016-03-26                   1         102          NA          NA #> 98   7 2017-07-20                   1         101         102         103 #> 99   7 2016-11-16                   1         101         104          NA #> 100 12 2017-07-24                   1         101          NA          NA read.csv(prescribing_data_filepath) #>     id  paid_date bnf_section num_items #> 1   19 2017-12-15         106         3 #> 2   19 2016-08-11         103         5 #> 3   19 2015-07-07         103         1 #> 4    7 2017-03-14         106         1 #> 5    3 2015-08-07         105         1 #> 6   18 2016-05-07         103         3 #> 7    2 2016-09-29         104         4 #> 8    5 2015-12-01         102         3 #> 9    2 2017-01-11         105         1 #> 10   6 2017-11-04         105         4 #> 11  10 2016-01-22         105         4 #> 12   2 2017-04-03         107         5 #> 13  15 2015-11-02         103         3 #> 14   4 2016-06-01         107         5 #> 15  15 2015-05-01         102         1 #> 16   6 2016-05-16         103         2 #> 17  15 2017-01-05         105         4 #> 18  19 2017-03-28         106         2 #> 19  19 2015-12-12         107         3 #> 20   5 2017-07-26         103         1 #> 21  11 2016-07-23         108         6 #> 22   8 2015-11-18         103         2 #> 23   5 2015-10-01         101         4 #> 24  12 2017-03-14         109         3 #> 25  17 2016-07-08         109         3 #> 26  17 2017-06-05         103         1 #> 27  12 2017-04-29         101         2 #> 28  17 2017-08-30         109         3 #> 29  10 2015-09-28         101         1 #> 30  13 2015-01-28         102         4 #> 31  19 2016-04-03         106         2 #> 32  13 2016-07-15         106         2 #> 33   0 2017-01-12         107         4 #> 34  14 2016-11-02         104         2 #> 35  14 2017-02-22         102         3 #> 36   4 2015-11-04         108         5 #> 37  17 2015-05-12         103         4 #> 38   3 2016-05-10         102         3 #> 39  15 2015-10-02         104         1 #> 40  17 2016-08-05         109         2 #> 41   9 2016-11-11         109         1 #> 42   1 2017-12-19         107         2 #> 43   3 2017-05-26         106         6 #> 44  13 2015-01-07         102         1 #> 45   0 2016-11-08         109         4 #> 46  13 2015-08-09         107         4 #> 47   2 2016-04-05         109         4 #> 48  12 2015-10-09         101         1 #> 49  10 2015-01-31         101         5 #> 50   1 2016-01-09         106         3 #> 51   3 2017-04-09         107         3 #> 52  19 2015-02-28         101         3 #> 53   8 2017-12-14         105         4 #> 54   8 2015-12-24         101         6 #> 55   9 2017-03-27         106         2 #> 56  10 2015-08-06         104         2 #> 57   3 2015-05-10         109         3 #> 58   0 2017-06-27         107         2 #> 59  12 2016-08-19         105         2 #> 60   5 2016-11-29         107         3 #> 61  13 2016-04-02         107         4 #> 62  17 2015-04-04         107         3 #> 63   8 2015-01-25         108         3 #> 64   8 2015-08-30         106         3 #> 65   3 2015-03-20         102         2 #> 66  14 2017-01-16         108         3 #> 67  13 2016-01-17         108         2 #> 68  18 2015-05-28         105         6 #> 69  15 2016-05-13         107         4 #> 70   3 2017-11-14         101         2 #> 71  16 2015-03-24         109         2 #> 72  19 2015-05-30         102         2 #> 73   7 2017-07-13         101         4 #> 74   3 2017-05-24         109         7 #> 75  17 2015-02-06         104         3 #> 76  18 2016-06-30         108         3 #> 77  19 2017-12-26         102         3 #> 78   1 2015-11-30         101         3 #> 79  17 2017-04-05         107         3 #> 80   9 2015-09-14         109         4 #> 81   8 2017-11-24         101         4 #> 82  16 2017-09-05         106         4 #> 83  18 2016-07-30         102         3 #> 84   5 2016-02-18         109         4 #> 85  15 2017-09-25         109         6 #> 86  17 2015-03-25         102         3 #> 87  17 2015-07-27         108         2 #> 88  19 2015-02-07         106         3 #> 89   6 2016-03-02         102         2 #> 90  16 2016-05-20         105         2 #> 91   8 2017-06-22         104         3 #> 92   8 2017-08-15         102         3 #> 93  15 2016-10-15         108         2 #> 94   7 2016-01-20         101         5 #> 95  15 2017-09-12         101         3 #> 96   9 2017-06-21         106         3 #> 97   0 2015-08-17         103         4 #> 98   1 2017-11-04         101         2 #> 99  15 2016-06-07         108         3 #> 100  4 2015-03-15         103         1"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combine.html","id":"read-in-the-specification","dir":"Articles","previous_headings":"","what":"2. Read in the specification","title":"Combine Example","text":"specification looks like. Notice now two features, refer different source tables. COMBINE_LINEAR feature type generates linear combination two subfeatures, coefficients specified weight field. case, weight subfeatures 1, means final feature simply sum two subfeatures. one wanted difference two subfeatures (example), one instead set weight second subfeature -1.","code":"basic_combine_spec_filepath <- eider_example(   \"spec_example_combine_linear.json\" ) writeLines(readLines(basic_combine_spec_filepath)) #> { #>     \"transformation_type\": \"COMBINE_LINEAR\", #>     \"output_feature_name\": \"sum_of_feature_1_and_feature_2\", #>     \"feature_list\": { #>         \"feature_1\": { #>             \"weight\": 1, #>             \"source_file\": \"ae2\", #>             \"grouping_column\": \"id\", #>             \"transformation_type\": \"COUNT\", #>             \"absent_default_value\": 0, #>             \"primary_filter\": { #>                 \"column\": \"attendance_category\", #>                 \"type\": \"IN\", #>                 \"value\": [1] #>             } #>         }, #>         \"feature_2\": { #>             \"weight\": 1, #>             \"source_file\": \"prescribing\", #>             \"grouping_column\": \"id\", #>             \"transformation_type\": \"COUNT\", #>             \"absent_default_value\": 0, #>             \"primary_filter\": { #>                 \"column\": \"bnf_section\", #>                 \"type\": \"IN\", #>                 \"value\": [106] #>             } #>         } #>     } #> }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/combine.html","id":"run-the-transformation","dir":"Articles","previous_headings":"","what":"3. Run the transformation","title":"Combine Example","text":"","code":"all_data_paths <- list(   ae2 = ae_data_filepath,   prescribing = prescribing_data_filepath ) run_pipeline(all_data_paths, basic_combine_spec_filepath) #> $features #>    id sum_of_feature_1_and_feature_2 #> 1   0                              9 #> 2   1                              5 #> 3   2                              5 #> 4   3                              4 #> 5   4                              2 #> 6   5                              4 #> 7   6                              7 #> 8   7                              7 #> 9   8                              6 #> 10  9                              5 #> 11 10                              5 #> 12 11                              3 #> 13 12                              6 #> 14 13                              9 #> 15 14                              6 #> 16 15                              5 #> 17 16                              3 #> 18 17                              8 #> 19 18                              3 #> 20 19                             10 #>  #> $responses #>    id #> 1   0 #> 2   1 #> 3   2 #> 4   3 #> 5   4 #> 6   5 #> 7   6 #> 8   7 #> 9   8 #> 10  9 #> 11 10 #> 12 11 #> 13 12 #> 14 13 #> 15 14 #> 16 15 #> 17 16 #> 18 17 #> 19 18 #> 20 19"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/eider.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"eider","text":"illustrate , construct simplistic data, may , example, record patients attended GP associated complaints. practice, likely reading data file instead. example, CSV file called attendances.csv current working directory, just : eider allows mix match data sources, data CSV file R data frame: allows user , example, perform preprocessing portion data needed.","code":"example_table <- data.frame(   patient_id        = c(1, 1, 1, 2, 2, 3, 3, 3),   attendance_reason = c(6, 6, 7, 6, 6, 7, 7, 7) )  data_sources <- list(attendances = example_table) data_sources_2 <- list(attendances = \"attendances.csv\") data_sources_3 <- list(   attendances = example_table,   # A variable which has already been constructed   other_data = \"other_data.csv\"  # A file to be read in )"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/eider.html","id":"feature-specification","dir":"Articles","previous_headings":"","what":"Feature specification","title":"eider","text":"Suppose want extract feature corresponding total number times patient attended reason 6. eider requires feature specified JSON file, looks like : transformation_type tells kind overall operation performed. determines fields required JSON. source_file specifies name data source used list data sources. grouping_column specifies columns group . absent_default_value specifies data particular patient ID. output_feature_name specifies name column created output table. primary_filter filter object used select rows input table match particular conditions. Subsequent vignettes go detail different types transformations required JSON fields .","code":"writeLines(readLines(\"example_attendances_6.json\")) #> { #>     \"transformation_type\": \"count\", #>     \"source_file\": \"attendances\", #>     \"grouping_column\": \"patient_id\", #>     \"absent_default_value\": 0, #>     \"output_feature_name\": \"total_attendances\", #>     \"primary_filter\": { #>         \"column\": \"attendance_reason\", #>         \"type\": \"in\", #>         \"value\": [ #>             6 #>         ] #>     } #> }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/eider.html","id":"performing-the-transformation","dir":"Articles","previous_headings":"","what":"Performing the transformation","title":"eider","text":"obtain desired feature, can simply : expected, patients 1 2 attended reason 6 twice, patient 3 . run_pipeline() returns list two data frames, called features responses respectively. refer data used training machine learning models: features independent variables (.e. X), responses dependent variables (.e. y). consistency, eider always returns data frames ensures list IDs. Responses may specified exactly way features, using response_filenames argument instead feature_filenames.","code":"run_pipeline(   data_sources = data_sources,   feature_filenames = \"example_attendances_6.json\" ) #> $features #>   id total_attendances #> 1  1                 2 #> 2  2                 2 #> 3  3                 0 #>  #> $responses #>   id #> 1  1 #> 2  2 #> 3  3"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"errors-with-context","dir":"Articles","previous_headings":"","what":"Errors with context","title":"Logging Example","text":"examples errors context using &E data","code":"ae_data_filepath <- eider_example(\"random_ae_data.csv\") ae_data_path <- list(ae2 = ae_data_filepath)"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"example-1","dir":"Articles","previous_headings":"Errors with context","what":"Example 1","title":"Logging Example","text":"","code":"wrong_spec1 <- eider_example(\"spec_wrong1_ae.json\") lines <- readLines(wrong_spec1) lines[3] #> [1] \"  \\\"transformation_type\\\": \\\"COUNT DRACULA\\\",\" tf <- run_pipeline(ae_data_path, wrong_spec1) #> Error in stop_context(context = context, message = paste0(\"Unknown transformation type: \", : unused argument (alist())"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"example-2","dir":"Articles","previous_headings":"Errors with context","what":"Example 2","title":"Logging Example","text":"","code":"wrong_spec2 <- eider_example(\"spec_wrong2_ae.json\") lines <- readLines(wrong_spec2) lines[4] #> [1] \"  \\\"grouping_column\\\": \\\"this_column_doesnt_exist\\\",\" tf <- run_pipeline(ae_data_path, wrong_spec2) #> Error: The name '../example_data/random_ae_data.csv' supplied for 'source_file' was not provided as an input table. #> Context: #>  > featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_wrong2_ae.json #>  > featurise_count"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/logging.html","id":"example-3","dir":"Articles","previous_headings":"Errors with context","what":"Example 3","title":"Logging Example","text":"","code":"wrong_spec3 <- eider_example(\"spec_wrong3_ae.json\") lines <- readLines(wrong_spec3) lines[11] #> [1] \"        \\\"column\\\": \\\"at_ten_dance_category\\\",\" tf <- run_pipeline(ae_data_path, wrong_spec3) #> Error: The name '../example_data/random_ae_data.csv' supplied for 'source_file' was not provided as an input table. #> Context: #>  > featurise: /tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/spec_wrong3_ae.json #>  > featurise_count"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/preprocessing.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Preprocessing","text":"example, consider following dataframe. loading data shown illustrative purposes: using eider need handled internally. , row episode; multiple episodes make stay. cis_marker field used label stays, can thus used identify episodes belonging stay. case, episode_within_cis tells us order episodes within stay; always present, though. Using patient ID 3 example - data contains details 4 episodes (CIS_MARKERS 23, 24, 25, 26). stay CIS_MARKER 23, three episodes, started 17th May 2015 ended date. stays CIS_MARKER 24, 25, one episode, stay CIS_MARKER 26 3 episodes, first episode admission date 21st April 2015, discharge date 22nd April. second episode admission date 22nd April discharge date day, third episode admission date 22nd discharge date 24th. stay patient 3 spanned 21st 24th April. episodic data necessary filter dates. example patient ID 14 cut--date set 1st August, first episode stay omitted, potentially second episode assumed first.","code":"smr04_data_filepath <- eider_example(\"random_smr04_data.csv\")  initial_table <- smr04_data_filepath %>%   utils::read.csv() %>%   tibble::as_tibble() %>%   dplyr::mutate(     admission_date = lubridate::ymd(admission_date),     discharge_date = lubridate::ymd(discharge_date)   )  initial_table #> # A tibble: 193 × 6 #>       id admission_date discharge_date cis_marker episode_within_cis some_code #>    <int> <date>         <date>              <int>              <int> <chr>     #>  1    15 2016-11-18     2016-11-19              6                  1 b         #>  2    14 2015-07-31     2015-07-31             14                  1 b         #>  3    14 2015-07-31     2015-08-01             14                  2 d         #>  4    19 2017-05-22     2017-05-24             52                  1 c         #>  5    11 2016-08-19     2016-08-21             28                  1 d         #>  6    14 2015-02-15     2015-02-16             15                  1 a         #>  7     7 2016-10-19     2016-10-20             27                  1 e         #>  8     7 2016-10-20     2016-10-20             27                  2 d         #>  9     4 2016-08-06     2016-08-07             79                  1 b         #> 10     4 2016-08-07     2016-08-10             79                  2 d         #> # ℹ 183 more rows initial_table %>% dplyr::filter(id == 3) #> # A tibble: 8 × 6 #>      id admission_date discharge_date cis_marker episode_within_cis some_code #>   <int> <date>         <date>              <int>              <int> <chr>     #> 1     3 2015-05-17     2015-05-17             23                  1 d         #> 2     3 2015-05-17     2015-05-17             23                  2 c         #> 3     3 2015-05-17     2015-05-17             23                  3 b         #> 4     3 2017-01-25     2017-01-29             24                  1 b         #> 5     3 2017-02-01     2017-02-01             25                  1 a         #> 6     3 2015-04-21     2015-04-22             26                  1 c         #> 7     3 2015-04-22     2015-04-22             26                  2 e         #> 8     3 2015-04-22     2015-04-24             26                  3 b"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/preprocessing.html","id":"the-preprocessing-step","dir":"Articles","previous_headings":"","what":"The preprocessing step","title":"Preprocessing","text":"way eider approached , allow users pre-process data, merge episodes stays. case specifying can select earliest admission date stay latest discharge date stay replace episode stay-related span. key features outlined : - preprocess$, specifies group data preprocessing. list column names (.e. strings). - preprocess$retain_min preprocess$retain_max, columns want keep minimum maximum values within group. entries can contain multiple (zero) columns want preprocess. example, JSON specification file, following included: mini-specification use cis_marker column identify episodes belong given patient stay, minimum admission_date maximum discharge_date replaced initial data. Using JSON file like result smr04 table converted feature calculated. , none done manually, handled internally eider. pre-processing mutates initial table (based specification) takes earliest admission date stay (comprising single multiple episodes) latest discharge date. now patient 3 still 4 stays data, episodes within cis_marker=26 stay given admission discharge date. allows user filter list episodes based overall stay dates, rather dates episode .","code":"{   \"source_file\": \"smr04\",   ...,   \"preprocess\": {     \"on\": [\"id\", \"cis_marker\"],     \"retain_min\": [\"admission_date\"],     \"retain_max\": [\"discharge_date\"]   },   ... } processed_table <- initial_table %>%   dplyr::group_by(id, cis_marker) %>%   dplyr::mutate(     admission_date = min(admission_date),     discharge_date = max(discharge_date)   ) %>%   dplyr::ungroup()  processed_table %>% dplyr::filter(id == 3) #> # A tibble: 8 × 6 #>      id admission_date discharge_date cis_marker episode_within_cis some_code #>   <int> <date>         <date>              <int>              <int> <chr>     #> 1     3 2015-05-17     2015-05-17             23                  1 d         #> 2     3 2015-05-17     2015-05-17             23                  2 c         #> 3     3 2015-05-17     2015-05-17             23                  3 b         #> 4     3 2017-01-25     2017-01-29             24                  1 b         #> 5     3 2017-02-01     2017-02-01             25                  1 a         #> 6     3 2015-04-21     2015-04-24             26                  1 c         #> 7     3 2015-04-21     2015-04-24             26                  2 e         #> 8     3 2015-04-21     2015-04-24             26                  3 b"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/preprocessing.html","id":"feature-outputs","dir":"Articles","previous_headings":"","what":"Feature outputs","title":"Preprocessing","text":"two full specification files, one without preprocessing request, one . spec requesting count number times episode 1, 2, 3 episode_within_cis occurs DISCHARGE_DATE earlier (equal ) 22nd April 2015. patient 3, without preprocessing step expect count 2 8 episodes, two CIS_MARKER 26 DISCHARGE_DATE 22nd April 2015, final episode stay satisfy date condition expected counted. spec requesting thing, now preprocessing step included. DISCHARGE_DATE episodes stay CIS_MARKER 26 now - latest discharge date stay, transform count none total episodes patient 3. means now zero episodes match criteria. Comparing , can see patient id 3, pre-processing applied, two episodes counted, preprocessing step applied, zero .","code":"spec_without_preprocessing <- eider_example(\"spec_smr04.json\") writeLines(readLines(spec_without_preprocessing)) #> { #>   \"source_file\": [\"smr04\"], #>   \"transformation_type\": [\"COUNT\"], #>   \"grouping_column\": [\"id\"], #>   \"absent_default_value\": 0, #>   \"output_feature_name\": [\"no_preprocessing\"], #>   \"primary_filter\": { #>     \"type\": [\"AND\"], #>     \"subfilters\": { #>       \"subfilter_1\": { #>         \"column\": [\"episode_within_cis\"], #>         \"type\": [\"IN\"], #>         \"value\": [1, 2, 3] #>       }, #>     \"subfilter_2\": { #>         \"column\": \"discharge_date\", #>         \"type\": \"date_lt_eq\", #>         \"value\": [\"2015-04-22\"] #>       } #>     } #>   } #> } spec_with_preprocessing <- eider_example(\"spec_smr04_preprocessing.json\") writeLines(readLines(spec_with_preprocessing)) #> { #>   \"source_file\": [\"smr04\"], #>   \"transformation_type\": [\"COUNT\"], #>   \"grouping_column\": [\"id\"], #>   \"absent_default_value\": 0, #>   \"output_feature_name\": [\"with_preprocessing\"], #>   \"preprocess\": { #>     \"on\": [\"id\", \"cis_marker\"], #>     \"retain_min\": \"admission_date\", #>     \"retain_max\": \"discharge_date\" #>     }, #>   \"primary_filter\": { #>     \"type\": [\"AND\"], #>     \"subfilters\": { #>       \"subfilter_1\": { #>         \"column\": [\"episode_within_cis\"], #>         \"type\": [\"IN\"], #>         \"value\": [1, 2, 3] #>       }, #>     \"subfilter_2\": { #>         \"column\": \"discharge_date\", #>         \"type\": \"date_lt_eq\", #>         \"value\": [\"2015-04-22\"] #>       } #>     } #>   } #> } processed <- run_pipeline(   data_sources = list(smr04 = eider_example(\"random_smr04_data.csv\")),   feature_filenames = c(     spec_without_preprocessing,     spec_with_preprocessing   ) )  processed$features #>    id no_preprocessing with_preprocessing #> 1   0                2                  2 #> 2   1                0                  0 #> 3   2                0                  0 #> 4   3                2                  0 #> 5   4                0                  0 #> 6   5                0                  0 #> 7   6                2                  2 #> 8   7                0                  0 #> 9   8                0                  0 #> 10  9                0                  0 #> 11 10                1                  0 #> 12 11                5                  5 #> 13 12                5                  5 #> 14 13                3                  3 #> 15 14                1                  1 #> 16 15                3                  3 #> 17 16                0                  0 #> 18 17                5                  5 #> 19 18                0                  0 #> 20 19                2                  2"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/prescribing.html","id":"prescribing-data","dir":"Articles","previous_headings":"","what":"1. Prescribing data","title":"Prescribing Example","text":"random example prescribing data file. first rows can see patient id 19 3 items bnf_section 0106 prescribed 15th December 2017, 5 items bnf_section 0103 prescribed 11th August 2016, 1 item bnf_section 0103 7th July 2015.","code":"prescribing_data_filepath <- eider_example(\"random_pis_data.csv\") read.csv(prescribing_data_filepath) #>     id  paid_date bnf_section num_items #> 1   19 2017-12-15         106         3 #> 2   19 2016-08-11         103         5 #> 3   19 2015-07-07         103         1 #> 4    7 2017-03-14         106         1 #> 5    3 2015-08-07         105         1 #> 6   18 2016-05-07         103         3 #> 7    2 2016-09-29         104         4 #> 8    5 2015-12-01         102         3 #> 9    2 2017-01-11         105         1 #> 10   6 2017-11-04         105         4 #> 11  10 2016-01-22         105         4 #> 12   2 2017-04-03         107         5 #> 13  15 2015-11-02         103         3 #> 14   4 2016-06-01         107         5 #> 15  15 2015-05-01         102         1 #> 16   6 2016-05-16         103         2 #> 17  15 2017-01-05         105         4 #> 18  19 2017-03-28         106         2 #> 19  19 2015-12-12         107         3 #> 20   5 2017-07-26         103         1 #> 21  11 2016-07-23         108         6 #> 22   8 2015-11-18         103         2 #> 23   5 2015-10-01         101         4 #> 24  12 2017-03-14         109         3 #> 25  17 2016-07-08         109         3 #> 26  17 2017-06-05         103         1 #> 27  12 2017-04-29         101         2 #> 28  17 2017-08-30         109         3 #> 29  10 2015-09-28         101         1 #> 30  13 2015-01-28         102         4 #> 31  19 2016-04-03         106         2 #> 32  13 2016-07-15         106         2 #> 33   0 2017-01-12         107         4 #> 34  14 2016-11-02         104         2 #> 35  14 2017-02-22         102         3 #> 36   4 2015-11-04         108         5 #> 37  17 2015-05-12         103         4 #> 38   3 2016-05-10         102         3 #> 39  15 2015-10-02         104         1 #> 40  17 2016-08-05         109         2 #> 41   9 2016-11-11         109         1 #> 42   1 2017-12-19         107         2 #> 43   3 2017-05-26         106         6 #> 44  13 2015-01-07         102         1 #> 45   0 2016-11-08         109         4 #> 46  13 2015-08-09         107         4 #> 47   2 2016-04-05         109         4 #> 48  12 2015-10-09         101         1 #> 49  10 2015-01-31         101         5 #> 50   1 2016-01-09         106         3 #> 51   3 2017-04-09         107         3 #> 52  19 2015-02-28         101         3 #> 53   8 2017-12-14         105         4 #> 54   8 2015-12-24         101         6 #> 55   9 2017-03-27         106         2 #> 56  10 2015-08-06         104         2 #> 57   3 2015-05-10         109         3 #> 58   0 2017-06-27         107         2 #> 59  12 2016-08-19         105         2 #> 60   5 2016-11-29         107         3 #> 61  13 2016-04-02         107         4 #> 62  17 2015-04-04         107         3 #> 63   8 2015-01-25         108         3 #> 64   8 2015-08-30         106         3 #> 65   3 2015-03-20         102         2 #> 66  14 2017-01-16         108         3 #> 67  13 2016-01-17         108         2 #> 68  18 2015-05-28         105         6 #> 69  15 2016-05-13         107         4 #> 70   3 2017-11-14         101         2 #> 71  16 2015-03-24         109         2 #> 72  19 2015-05-30         102         2 #> 73   7 2017-07-13         101         4 #> 74   3 2017-05-24         109         7 #> 75  17 2015-02-06         104         3 #> 76  18 2016-06-30         108         3 #> 77  19 2017-12-26         102         3 #> 78   1 2015-11-30         101         3 #> 79  17 2017-04-05         107         3 #> 80   9 2015-09-14         109         4 #> 81   8 2017-11-24         101         4 #> 82  16 2017-09-05         106         4 #> 83  18 2016-07-30         102         3 #> 84   5 2016-02-18         109         4 #> 85  15 2017-09-25         109         6 #> 86  17 2015-03-25         102         3 #> 87  17 2015-07-27         108         2 #> 88  19 2015-02-07         106         3 #> 89   6 2016-03-02         102         2 #> 90  16 2016-05-20         105         2 #> 91   8 2017-06-22         104         3 #> 92   8 2017-08-15         102         3 #> 93  15 2016-10-15         108         2 #> 94   7 2016-01-20         101         5 #> 95  15 2017-09-12         101         3 #> 96   9 2017-06-21         106         3 #> 97   0 2015-08-17         103         4 #> 98   1 2017-11-04         101         2 #> 99  15 2016-06-07         108         3 #> 100  4 2015-03-15         103         1"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/prescribing.html","id":"specification-file---number-of-unique","dir":"Articles","previous_headings":"","what":"2. Specification file - Number of unique","title":"Prescribing Example","text":"specification file defining number unique instances bnf_section column (called “aggregation_column” specification) grouped patient id. , entries patient 19 data file, 2 unique entries. date filtering applied, case 1st January 2015 1st January 2018 inclusive.","code":"prescribing_spec_nunique_fp <- eider_example(   \"spec_example_basic_prescribing_nunique.json\" ) writeLines(readLines(prescribing_spec_nunique_fp)) #> { #>     \"source_file\": \"prescribing\", #>     \"transformation_type\": \"NUNIQUE\", #>     \"aggregation_column\": \"bnf_section\", #>     \"grouping_column\": \"id\", #>     \"absent_default_value\": 0, #>     \"output_feature_name\": \"N_unique_sections\", #>     \"primary_filter\" : { #>         \"type\": \"AND\", #>         \"subfilters\":{ #>             \"subfilter_1\": { #>                 \"column\": \"paid_date\", #>                 \"type\": \"DATE_GT_EQ\", #>                 \"value\": [\"2015-01-01\"] #>             }, #>             \"subfilter_2\": { #>                 \"column\": \"paid_date\", #>                 \"type\": \"DATE_LT_EQ\", #>                 \"value\": [\"2018-01-01\"] #>             } #>         } #>     } #> }"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/prescribing.html","id":"run-transformation---number-of-unique","dir":"Articles","previous_headings":"","what":"3. Run transformation - Number of unique","title":"Prescribing Example","text":"results transformation shown - patient id 0 3 unique values bnf_section, patient id 19 ultimately ended 5 unique selections specified time period.","code":"prescribing_data_path <- list(prescribing = prescribing_data_filepath) run_pipeline(prescribing_data_path, prescribing_spec_nunique_fp) #> $features #>    id N_unique_sections #> 1   0                 3 #> 2   1                 3 #> 3   2                 4 #> 4   3                 6 #> 5   4                 3 #> 6   5                 5 #> 7   6                 3 #> 8   7                 2 #> 9   8                 7 #> 10  9                 2 #> 11 10                 3 #> 12 11                 1 #> 13 12                 3 #> 14 13                 4 #> 15 14                 3 #> 16 15                 8 #> 17 16                 3 #> 18 17                 6 #> 19 18                 4 #> 20 19                 5 #>  #> $responses #>    id #> 1   0 #> 2   1 #> 3   2 #> 4   3 #> 5   4 #> 6   5 #> 7   6 #> 8   7 #> 9   8 #> 10  9 #> 11 10 #> 12 11 #> 13 12 #> 14 13 #> 15 14 #> 16 15 #> 17 16 #> 18 17 #> 19 18 #> 20 19"},{"path":"https://alan-turing-institute.github.io/eider/docs/articles/prescribing.html","id":"number-of-prescibed-items","dir":"Articles","previous_headings":"","what":"4. Number of prescibed items","title":"Prescribing Example","text":"following specification can used return number prescribed items, per patient specified date range. corresponding transformation","code":"prescribing_spec_npresc_fp <- eider_example(   \"spec_example_basic_prescribing_nprescribed.json\" ) writeLines(readLines(prescribing_spec_npresc_fp)) #> { #>     \"source_file\": \"prescribing\", #>     \"transformation_type\": \"SUM\", #>     \"aggregation_column\": \"num_items\", #>     \"grouping_column\": \"id\", #>     \"absent_default_value\": 0, #>     \"output_feature_name\": \"number_of_prescribed_items_goes_here\", #>     \"primary_filter\" : { #>         \"type\": \"AND\", #>         \"subfilters\":{ #>             \"subfilter_1\": { #>                 \"column\": \"paid_date\", #>                 \"type\": \"DATE_GT_EQ\", #>                 \"value\": [\"2015-01-01\"] #>             }, #>             \"subfilter_2\": { #>                 \"column\": \"paid_date\", #>                 \"type\": \"DATE_LT_EQ\", #>                 \"value\": [\"2018-01-01\"] #>             } #>         } #>     } #> } run_pipeline(prescribing_data_path, prescribing_spec_npresc_fp) #> $features #>    id number_of_prescribed_items_goes_here #> 1   0                                   14 #> 2   1                                   10 #> 3   2                                   14 #> 4   3                                   27 #> 5   4                                   11 #> 6   5                                   15 #> 7   6                                    8 #> 8   7                                   10 #> 9   8                                   28 #> 10  9                                   10 #> 11 10                                   12 #> 12 11                                    6 #> 13 12                                    8 #> 14 13                                   17 #> 15 14                                    8 #> 16 15                                   27 #> 17 16                                    8 #> 18 17                                   27 #> 19 18                                   15 #> 20 19                                   27 #>  #> $responses #>    id #> 1   0 #> 2   1 #> 3   2 #> 4   3 #> 5   4 #> 6   5 #> 7   6 #> 8   7 #> 9   8 #> 10  9 #> 11 10 #> 12 11 #> 13 12 #> 14 13 #> 15 14 #> 16 15 #> 17 16 #> 18 17 #> 19 18 #> 20 19"},{"path":"https://alan-turing-institute.github.io/eider/docs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Catalina Vallejos. Contributor. Louis Aslett. Contributor. Simon Rogers. Contributor. Camila Rangel Smith. Maintainer, contributor. Helen Duncan Little. Author. Jonathan Yong. Author.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Duncan Little H, Yong J (2024). eider: Todo Acronym Decided. R package version 0.0.1.0.","code":"@Manual{,   title = {eider: Todo Acronym Has Not Been Decided},   author = {Helen {Duncan Little} and Jonathan Yong},   year = {2024},   note = {R package version 0.0.1.0}, }"},{"path":"https://alan-turing-institute.github.io/eider/docs/index.html","id":"eider","dir":"","previous_headings":"","what":"Todo Acronym Has Not Been Decided","title":"Todo Acronym Has Not Been Decided","text":"goal eider … TODO","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Todo Acronym Has Not Been Decided","text":"can install development version eider GitHub : TODO: write examples","code":"install.packages(\"devtools\") devtools::install_github(\"alan-turing-institute/eider\") library(eider)"},{"path":"https://alan-turing-institute.github.io/eider/docs/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Todo Acronym Has Not Been Decided","text":"making changes library , first clone repository: need install lintr, pkgdown, devtools R packages build documentation, run tests, lint. , repository root, can use following commands: make doc generates function documentation, also generates README.md file README.rmd make lint lints project directory make test runs tests can also use pre-commit run committing, ensure commit incomplete code. Firstly, install pre-commit according instructions webpage . run pre-commit install. vignettes? Well, building vignettes slightly complicated. can perform one-time build R console using pkgdown::build_site(), running every time edit file gets tiring quickly. automate , first install package make install, install working version Python also entr (latter available Homebrew via brew install entr). run make vig: monitor vignette RMarkdown files, rebuild vignettes time changed, launch HTTP server port 8000 view files. change library code run make install rerunning make vig.","code":"git clone git@github.com:alan-turing-institute/eider.git"},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider-package.html","id":null,"dir":"Reference","previous_headings":"","what":"eider: Todo Acronym Has Not Been Decided — eider-package","title":"eider: Todo Acronym Has Not Been Decided — eider-package","text":"eider lightweight package processing tabular data declarative fashion. get started, see: vignette(\"eider\")","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"eider: Todo Acronym Has Not Been Decided — eider-package","text":"Maintainer: Camila Rangel Smith crangelsmith@turing.ac.uk (ORCID) [contributor] Authors: Helen Duncan Little hduncan@turing.ac.uk (ORCID) Jonathan Yong jyong@turing.ac.uk (ORCID) contributors: Catalina Vallejos catalina.vallejos@ed.ac.uk (ORCID) [contributor] Louis Aslett louis.aslett@durham.ac.uk (ORCID) [contributor] Simon Rogers simon.rogers@nhs.scot (ORCID) [contributor]","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Return path to the example datasets provided with the package — eider_example","title":"Return path to the example datasets provided with the package — eider_example","text":"Return path example datasets provided package","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return path to the example datasets provided with the package — eider_example","text":"","code":"eider_example(file = NULL)"},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return path to the example datasets provided with the package — eider_example","text":"file Name file used inst/extdata. NULL files listed","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return path to the example datasets provided with the package — eider_example","text":"character string path file, vector strings","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/eider_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return path to the example datasets provided with the package — eider_example","text":"","code":"eider_example() #>  [1] \"random_ae_data.csv\"                              #>  [2] \"random_pis_data.csv\"                             #>  [3] \"random_smr04_data.csv\"                           #>  [4] \"spec_basic_ae_data.json\"                         #>  [5] \"spec_example_basic_ae_data.json\"                 #>  [6] \"spec_example_basic_ae_data_or_w_date.json\"       #>  [7] \"spec_example_basic_ae_data_w_date.json\"          #>  [8] \"spec_example_basic_ae_data_wrong_format.json\"    #>  [9] \"spec_example_basic_prescribing_nprescribed.json\" #> [10] \"spec_example_basic_prescribing_nunique.json\"     #> [11] \"spec_example_combine_linear.json\"                #> [12] \"spec_smr04.json\"                                 #> [13] \"spec_smr04_preprocessing.json\"                   #> [14] \"spec_wrong1_ae.json\"                             #> [15] \"spec_wrong2_ae.json\"                             #> [16] \"spec_wrong3_ae.json\"                             eider_example(\"random_ae_data.csv\") #> [1] \"/tmp/RtmpHiHAVc/temp_libpath16b8607b1a52/eider/extdata/random_ae_data.csv\""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/run_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform the entire feature transformation process. — run_pipeline","title":"Perform the entire feature transformation process. — run_pipeline","text":"Perform entire feature transformation process.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/run_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform the entire feature transformation process. — run_pipeline","text":"","code":"run_pipeline(   data_sources,   feature_filenames = NULL,   response_filenames = NULL,   all_ids = NULL )"},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/run_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform the entire feature transformation process. — run_pipeline","text":"data_sources list mapping unique table identifiers either file path read , data frame . feature_filenames vector file paths feature JSON specifications. Defaults NULL. response_filenames vector file paths feature JSON specifications. Defaults NULL. all_ids vector unique identifiers final feature table. given, generate feature table containing unique identifiers found input tables used least one feature.","code":""},{"path":"https://alan-turing-institute.github.io/eider/docs/reference/run_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform the entire feature transformation process. — run_pipeline","text":"data frame feature tables joined together","code":""}]
