---
title: "minisparra"
---

This Quarto book serves as a demo of the minisparra package (for which we still don't have a real name).

First, we load the package from the local directory.

```{r}
install.packages("../minisparra/", repos = NULL, type = "source")
library(miniSPARRA01)
```

Also, let's set up a function to visualise tables nicely.

```{r}
library(knitr)
library(kableExtra)
library(tidyverse)
kbl <- function(x) {
  x <- head(x, 10)
  x %>%
    knitr::kable(format = 'html', table.attr = 'data-quarto-disable-processing="true"') %>%
    kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
}
```

---------

## Library usage (as of 23 Feb 2024)

Here's the JSON:

```{r}
writeLines(readLines("../example_spec/ae2_data.json"))
```

Here's the CSV:

In this example, patient 18 was admitted on the 3rd of July 2016, they had 3 unique diagnoses, 104, 103, and 102.

## (2) Look at an example input JSON file

```{r}

writeLines(readLines("../example_spec/ae2_data.json"))
```

This spec is for A&E data, it defines the source file, the transformation type (count), and which column to group on (user_id). It specifies how absent data should be reported and also allows the user to define the name for the output feature. 
The primary filter is an AND filter. It requires attendance type to be 1, and filters for diagnosis_1, diagnosis_2 OR diagnosis_3 equalling 101 or 102 within the date range of of the year 2015.
=======
tbl <- read.csv("../example_data/random_ae_data.csv")
glimpse(tbl)
```

And here's what we can do with it:
>>>>>>> main

## (3) Trying the transformation pipeline
```{r}
all_feature_json_filenames <- c("../example_spec/basic_ae_data.json")
all_table_filenames <- c("../example_data/random_ae_data.csv")
transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = all_feature_json_filenames
)
```

## Logging

Set up logging.
By default this is printed to the console.
In order to see the log output in Quarto, we need to capture it in a temporary file.

```{r}
library(logger)
t <- tempfile()
log_threshold(TRACE)
log_appender(appender_file(t))
```

Then run the same code again:

```{r}
transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = all_feature_json_filenames
)
```

Check the log:

```{r}
readLines(t)
```

## Errors with context

### Example 1

```{r}
lines <- readLines("./ae2_data_wrong1.json")
lines[3]
```

```{r error=TRUE}
transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = "./ae2_data_wrong1.json")
```

### Example 2

```{r}
lines <- readLines("./ae2_data_wrong2.json")
lines[4]
```

```{r error=TRUE}
transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = "./ae2_data_wrong2.json")
```

### Example 3

```{r}
lines <- readLines("./ae2_data_wrong3.json")
lines[11]
```

```{r error=TRUE}
transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = "./ae2_data_wrong3.json")
```
>>>>>>> main
