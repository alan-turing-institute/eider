---
title: "minisparra"
---

This Quarto book serves as a demo of the minisparra package (for which we still don't have a real name).

First, we load the package from the local directory.

```{r}
install.packages("../minisparra/", repos = NULL, type = "source")
library(miniSPARRA01)
```

Also, let's set up a function to visualise tables nicely.

```{r}
library(knitr)
library(kableExtra)
library(tidyverse)
kbl <- function(x) {
  x <- head(x, 10)
  x %>%
    knitr::kable(format = 'html', table.attr = 'data-quarto-disable-processing="true"') %>%
    kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
}
```

---------

# Process pipeline
## 0. Decide what you want to filter for
MINISPARRA is designed to process (Scottish) medical data and collate using a range of filter functions to allow users to easily extract tables for ML pipelines. 

Argubly the first step should be to decide which data you will use, and how you will filter it. MINISPARRA allows users to specify a range of data sources (files/tables) and to define which features they want to extract data via a specification json. MINISPARRA will filter and join the data as per the spec.


## 1. Read in data
In this example we will use some random A&E-type data stored in a csv file, and filter based on 2 categories. The `attendance_type` column and the `diagnosis_1` column. But data can be derived from multiple sources, and joined subsequently.

This step must be done before any feature extraction to avoid having to read the same table multiple times.

```{r}
filenames <- c("../example_data/random_ae_data.csv")
all_tables <- read_all_tables(filenames)
all_tables$`../example_data/random_ae_data.csv` %>% kbl()
```

`all_tables` is a list which associates each of the filenames with the data read from that file, and in this example it corresponds to just the random A&E data.

The table has 6 columns, a patient id `id`, a `date` TODO update header at which the admission occured, an `attendance_type`, and three diagnosis categories, `diagnosis_1`, `diagnosis_2`, and `diagnosis_3`

From the first row in this example we can see that patient 18 was admitted on the 3rd of July 2016, they had 3 unique diagnoses, 104, 103, and 102.

## 2. Define a feature to extract
Users then specify which features they would like to extract from which data. A simple specification file is given below.

`source_file` is a relative path to the data (in this case the random A&E data). `transformation_type` is the type of transformation which will take place. MINISPARRA has N different transformation types, X, Y, and Z.
The user specifies how the data will be grouped via `grouping_columns`, which in this case is grouping by patient ID. An (optional) flag for what to do if data is absent is given - here it will be to report 0. `output_feature_name` defines the header for the column in the output dataframe which will contain the results of the specific transformation

```{r}
writeLines(readLines("../example_spec/basic_ae_data.json"))
```

The `primary_filter` is AND, and there are two `subfilters`. The first subfilter - `subfilter_1` specifies that the user wants to filter based on the `attendance_category` column of the random A&E-type data, and that the value that they are interested in is 1. That is only return results where the `attendance_category` is 1.

The second subfilter `subfilter_2` filters based on the `diagnosis_1` column and should only return results where `diagnosis_1` is 101.

As the primary filter is AND, the resultant dataframe will be a count, grouped by patient `id` of A&E data with `attendance_category` = 1 AND `diagnosos_1` = 101.

## 3. Extract the feature
Now we can use MINISPARRA to run the transformation pipeline. We specify the path to the data via `all_table_filenames` and the path the the specification via `all_feature_json_filenames`.

We then run the transformation which will produce the resultant dataframe.
```{r}

all_table_filenames <- c("../example_data/random_ae_data.csv")
all_feature_json_filenames <- c("../example_spec/basic_ae_data.json")

tf <- transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = all_feature_json_filenames
)

tf
```

Above is the resultant dataframe. Patient with ID 0 had 2 instances where their `diagnosis_1` was 101, patient with ID 1 had just one, and so on...


In this example, patient 18 was admitted on the 3rd of July 2016, they had 3 unique diagnoses, 104, 103, and 102.

## 4. Using date filtering
In the above example the returned dataframe spanned all the dates over which the input data csv spanned. However this can be refined in the specification.
```{r}
writeLines(readLines("quarto_examples/basic_ae_data_w_date.json"))
```
An additonal subfilter has been added. Subfilter_3 is applied to the `time` column and filters based on dates that are greater than the 31st of December 2015. This means an event which happened on new-years-eve 2015 will not be included in the data, but events which occured on new-years-day 2016 would be.

We can again run this transformation pipeline with the same A&E data:

```{r}

all_table_filenames <- c("../example_data/random_ae_data.csv")
all_feature_json_filenames <- c("quarto_examples/basic_ae_data_w_date.json")

tf_w_date <- transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = all_feature_json_filenames
)

tf_w_date

```
## 5. Using OR filter

## 6.Logging

By default the log is currently printed to the console. In order to see the log output in Quarto, we need to capture it in a temporary file.

The log is set up

```{r}
library(logger)
tmp <- tempfile()
log_threshold(TRACE)
log_appender(appender_file(tmp))
```

And the same code is run again

```{r}

all_table_filenames <- c("../example_data/random_ae_data.csv")
all_feature_json_filenames <- c("../example_spec/basic_ae_data.json")

tf <- transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = all_feature_json_filenames
)
```

Check the log:

```{r}
readLines(tmp)
```

## Errors with context

### Example 1

```{r}
lines <- readLines("./ae2_data_wrong1.json")
lines[3]
```

```{r error=TRUE}
transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = "./ae2_data_wrong1.json")
```

### Example 2

```{r}
lines <- readLines("./ae2_data_wrong2.json")
lines[4]
```

```{r error=TRUE}
transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = "./ae2_data_wrong2.json")
```

### Example 3

```{r}
lines <- readLines("./ae2_data_wrong3.json")
lines[11]
```

```{r error=TRUE}
transform(
  all_table_filenames = all_table_filenames,
  all_feature_json_filenames = "./ae2_data_wrong3.json")
```

## Glossary
