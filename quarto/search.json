[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "minisparra",
    "section": "",
    "text": "This Quarto book serves as a demo of the minisparra package (for which we still don’t have a real name).\nFirst, we load the package from the local directory.\ninstall.packages(\"../minisparra/\", repos = NULL, type = \"source\")\n\nInstalling package into '/home/runner/work/_temp/Library'\n(as 'lib' is unspecified)\n\nlibrary(miniSPARRA01)\n\n\nAttaching package: 'miniSPARRA01'\n\n\nThe following object is masked from 'package:base':\n\n    transform\nAlso, let’s set up a function to visualise tables nicely.\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()     masks stats::filter()\n✖ dplyr::group_rows() masks kableExtra::group_rows()\n✖ dplyr::lag()        masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nkbl &lt;- function(x) {\n  x %&gt;%\n    knitr::kable(format = 'html', table.attr = 'data-quarto-disable-processing=\"true\"') %&gt;%\n    kableExtra::kable_styling(bootstrap_options = \"striped\", full_width = FALSE)\n}"
  },
  {
    "objectID": "index.html#library-usage-as-of-23-feb-2024",
    "href": "index.html#library-usage-as-of-23-feb-2024",
    "title": "minisparra",
    "section": "Library usage (as of 23 Feb 2024)",
    "text": "Library usage (as of 23 Feb 2024)\nHere’s the JSON:\n\nwriteLines(readLines(\"../example_spec/ae2_data.json\"))\n\n{\n  \"source_file\": [\"ae2.csv\"],\n  \"transformation_type\": [\"COUNT\"],\n  \"grouping_columns\": [\"user_id\"],\n  \"absent_data_flag\": [0],\n  \"output_feature_name\": [\"user_defined_name\"],\n  \"primary_filter\": {\n    \"type\": [\"AND\"],\n    \"subfilters\": {\n      \"subfilter_1\": {\n        \"column\": [\"attendance_type\"],\n        \"type\": [\"IN\"],\n        \"value\": [7]\n      },\n      \"subfilter_2\": {\n        \"type\": [\"OR\"],\n        \"subfilters\": {\n          \"subfilter_21\": {\n            \"column\": [\"diagnosis_1\"],\n            \"type\": [\"IN\"],\n            \"value\": [1, 2]\n          },\n          \"subfilter_22\": {\n            \"column\": [\"diagnosis_2\"],\n            \"type\": [\"IN\"],\n            \"value\": [1, 2]\n          },\n          \"subfilter_23\": {\n            \"column\": [\"diagnosis_3\"],\n            \"type\": [\"IN\"],\n            \"value\": [1, 2]\n          }\n        }\n      },\n      \"subfilter_3\": {\n        \"column\": [\"attendance_date\"],\n        \"type\": [\"DATE_GT_EQ\"],\n        \"value\": [\"2022-01-01\"]\n      },\n      \"subfilter_4\": {\n        \"column\": [\"attendance_date\"],\n        \"type\": [\"DATE_LT\"],\n        \"value\": [\"2024-02-01\"]\n      }\n    }\n  }\n}\n\n\nHere’s the CSV:\n\ntbl &lt;- read.csv(\"../example_data/random_ae_data.csv\")\nglimpse(tbl)\n\nRows: 100\nColumns: 6\n$ id                  &lt;int&gt; 18, 1, 7, 17, 12, 14, 7, 15, 7, 10, 11, 7, 15, 7, …\n$ time                &lt;chr&gt; \"2016-07-03\", \"2016-09-27\", \"2015-06-09\", \"2017-07…\n$ attendance_category &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ diagnosis_1         &lt;int&gt; 104, 103, 104, 103, 104, 101, 104, 103, 101, 103, …\n$ diagnosis_2         &lt;int&gt; 103, 103, 101, 102, 102, 102, 104, NA, 104, 102, 1…\n$ diagnosis_3         &lt;int&gt; 102, 103, NA, NA, 102, 101, NA, 103, 101, NA, 102,…\n\n\nAnd here’s what we can do with it:\n\nall_feature_json_filenames &lt;- c(\"../example_spec/basic_ae_data.json\")\nall_table_filenames &lt;- c(\"../example_data/random_ae_data.csv\")\ntransform(\n  all_table_filenames = all_table_filenames,\n  all_feature_json_filenames = all_feature_json_filenames\n)\n\n   id user_defined_name\n1   0                 3\n2   1                 1\n3   2                 1\n4   3                 2\n5   4                 1\n6   5                 1\n7   7                 3\n8   9                 1\n9  10                 2\n10 11                 1\n11 12                 1\n12 14                 1\n13 17                 1\n14 19                 1"
  },
  {
    "objectID": "index.html#logging",
    "href": "index.html#logging",
    "title": "minisparra",
    "section": "Logging",
    "text": "Logging\nSet up logging. By default this is printed to the console. In order to see the log output in Quarto, we need to capture it in a temporary file.\n\nlibrary(logger)\nt &lt;- tempfile()\nlog_threshold(TRACE)\nlog_appender(appender_file(t))\n\nThen run the same code again:\n\ntransform(\n  all_table_filenames = all_table_filenames,\n  all_feature_json_filenames = all_feature_json_filenames\n)\n\n   id user_defined_name\n1   0                 3\n2   1                 1\n3   2                 1\n4   3                 2\n5   4                 1\n6   5                 1\n7   7                 3\n8   9                 1\n9  10                 2\n10 11                 1\n11 12                 1\n12 14                 1\n13 17                 1\n14 19                 1\n\n\nCheck the log:\n\nreadLines(t)\n\n[1] \"TRACE [2024-02-27 22:26:28] context: featurise:../example_spec/basic_ae_data.json\"                                                      \n[2] \"DEBUG [2024-02-27 22:26:28] Parsing nested filter\"                                                                                      \n[3] \"DEBUG [2024-02-27 22:26:28] Parsing single filter\"                                                                                      \n[4] \"DEBUG [2024-02-27 22:26:28] Parsing single filter\"                                                                                      \n[5] \"TRACE [2024-02-27 22:26:28] context: featurise:../example_spec/basic_ae_data.json &gt; featurise_count\"                                    \n[6] \"TRACE [2024-02-27 22:26:28] context: featurise:../example_spec/basic_ae_data.json &gt; featurise_count &gt; filter_and\"                       \n[7] \"TRACE [2024-02-27 22:26:28] context: featurise:../example_spec/basic_ae_data.json &gt; featurise_count &gt; filter_and &gt; (1/2) &gt; filter_basic\"\n[8] \"TRACE [2024-02-27 22:26:28] context: featurise:../example_spec/basic_ae_data.json &gt; featurise_count &gt; filter_and &gt; (2/2) &gt; filter_basic\"\n[9] \"TRACE [2024-02-27 22:26:28] context: join_feature_tables\""
  },
  {
    "objectID": "index.html#errors-with-context",
    "href": "index.html#errors-with-context",
    "title": "minisparra",
    "section": "Errors with context",
    "text": "Errors with context\n\nExample 1\n\nlines &lt;- readLines(\"./ae2_data_wrong1.json\")\nlines[3]\n\n[1] \"  \\\"transformation_type\\\": [\\\"COUNT DRACULA\\\"],\"\n\n\n\ntransform(\n  all_table_filenames = all_table_filenames,\n  all_feature_json_filenames = \"./ae2_data_wrong1.json\")\n\nError: Unknown transformation type: count dracula\nContext:\n &gt; featurise:./ae2_data_wrong1.json\n\n\n\n\nExample 2\n\nlines &lt;- readLines(\"./ae2_data_wrong2.json\")\nlines[4]\n\n[1] \"  \\\"grouping_columns\\\": [\\\"this_column_doesnt_exist\\\"],\"\n\n\n\ntransform(\n  all_table_filenames = all_table_filenames,\n  all_feature_json_filenames = \"./ae2_data_wrong2.json\")\n\nError: Error in `rename()`:\n! Can't rename columns that don't exist.\n✖ Column `this_column_doesnt_exist` doesn't exist.\n\nContext:\n &gt; featurise:./ae2_data_wrong2.json\n &gt; featurise_count\n\n\n\n\nExample 3\n\nlines &lt;- readLines(\"./ae2_data_wrong3.json\")\nlines[11]\n\n[1] \"        \\\"column\\\": [\\\"at_ten_dance_category\\\"],\"\n\n\n\ntransform(\n  all_table_filenames = all_table_filenames,\n  all_feature_json_filenames = \"./ae2_data_wrong3.json\")\n\nError: Column 'at_ten_dance_category' not found in the table.\nContext:\n &gt; featurise:./ae2_data_wrong3.json\n &gt; featurise_count\n &gt; filter_and\n &gt; (1/2)\n &gt; filter_basic"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]